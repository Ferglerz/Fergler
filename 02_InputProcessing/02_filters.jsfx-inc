// Filter Processing Module
// Filter processing including biquad filters for detection signal filtering
// Applies to whichever detection signal is active (regular or sidechain)
// Depends on: 00b_math_utils.jsfx-inc

@init

//==============================================================================
// FILTER COEFFICIENT CALCULATIONS
//==============================================================================

// type: 0 = highpass, 1 = lowpass
function calc_biquad(type, freq) (
  w = 2 * $pi * freq / srate;
  cosw = cos(w);
  alpha = sin(w) / sqrt(2);
  a0 = 1 + alpha;
  type == 1 ? (
    // Lowpass
    b0 = (1 - cosw) / (2 * a0);
    b1 = (1 - cosw) / a0;
    b2 = b0;
  ) : (
    // Highpass (type == 0)
    b0 = (1 + cosw) / (2 * a0);
    b1 = -(1 + cosw) / a0;
    b2 = b0;
  );
  a1 = -2 * cosw / a0;
  a2 = (1 - alpha) / a0;
);

//==============================================================================
// FILTER APPLICATION
//==============================================================================

function apply_detection_filters(detect_l, detect_r) (
  // Apply highpass filter (only if enabled)
  audio.filters.state.hp.enabled ? (
    detect_l_filtered = audio.filters.state.hp.coeffs.b0 * detect_l + 
                       audio.filters.state.hp.coeffs.b1 * audio.filters.state.hp.left.x1 + 
                       audio.filters.state.hp.coeffs.b2 * audio.filters.state.hp.left.x2 - 
                       audio.filters.state.hp.coeffs.a1 * audio.filters.state.hp.left.y1 - 
                       audio.filters.state.hp.coeffs.a2 * audio.filters.state.hp.left.y2;
    audio.filters.state.hp.left.x2 = audio.filters.state.hp.left.x1; 
    audio.filters.state.hp.left.x1 = detect_l; 
    audio.filters.state.hp.left.y2 = audio.filters.state.hp.left.y1; 
    audio.filters.state.hp.left.y1 = detect_l_filtered;

    detect_r_filtered = audio.filters.state.hp.coeffs.b0 * detect_r + 
                       audio.filters.state.hp.coeffs.b1 * audio.filters.state.hp.right.x1 + 
                       audio.filters.state.hp.coeffs.b2 * audio.filters.state.hp.right.x2 - 
                       audio.filters.state.hp.coeffs.a1 * audio.filters.state.hp.right.y1 - 
                       audio.filters.state.hp.coeffs.a2 * audio.filters.state.hp.right.y2;
    audio.filters.state.hp.right.x2 = audio.filters.state.hp.right.x1; 
    audio.filters.state.hp.right.x1 = detect_r; 
    audio.filters.state.hp.right.y2 = audio.filters.state.hp.right.y1; 
    audio.filters.state.hp.right.y1 = detect_r_filtered;
  ) : (
    // HP filter off - pass through unfiltered
    detect_l_filtered = detect_l;
    detect_r_filtered = detect_r;
  );

  // Apply lowpass filter (only if enabled)
  audio.filters.state.lp.enabled ? (
    detect_l = audio.filters.state.lp.coeffs.b0 * detect_l_filtered + 
               audio.filters.state.lp.coeffs.b1 * audio.filters.state.lp.left.x1 + 
               audio.filters.state.lp.coeffs.b2 * audio.filters.state.lp.left.x2 - 
               audio.filters.state.lp.coeffs.a1 * audio.filters.state.lp.left.y1 - 
               audio.filters.state.lp.coeffs.a2 * audio.filters.state.lp.left.y2;
    audio.filters.state.lp.left.x2 = audio.filters.state.lp.left.x1; 
    audio.filters.state.lp.left.x1 = detect_l_filtered; 
    audio.filters.state.lp.left.y2 = audio.filters.state.lp.left.y1; 
    audio.filters.state.lp.left.y1 = detect_l;

    detect_r = audio.filters.state.lp.coeffs.b0 * detect_r_filtered + 
               audio.filters.state.lp.coeffs.b1 * audio.filters.state.lp.right.x1 + 
               audio.filters.state.lp.coeffs.b2 * audio.filters.state.lp.right.x2 - 
               audio.filters.state.lp.coeffs.a1 * audio.filters.state.lp.right.y1 - 
               audio.filters.state.lp.coeffs.a2 * audio.filters.state.lp.right.y2;
    audio.filters.state.lp.right.x2 = audio.filters.state.lp.right.x1; 
    audio.filters.state.lp.right.x1 = detect_r_filtered; 
    audio.filters.state.lp.right.y2 = audio.filters.state.lp.right.y1; 
    audio.filters.state.lp.right.y1 = detect_r;
  ) : (
    // LP filter off - pass through HP-filtered signal
    detect_l = detect_l_filtered;
    detect_r = detect_r_filtered;
  );

  // Return filtered signals via global variables
  filtered_l = detect_l;
  filtered_r = detect_r;
);


//==============================================================================
// FILTER UTILITIES
//==============================================================================

function update_filter_coefficients() (
  // Update highpass filter coefficients (skip if Off)
  // slider11: 0 = Off, > 0 = enabled
  slider11 > 0 ? (
    calc_biquad(0, max(slider11, 20));  // 0 = highpass
    audio_filters_hp_set_coeffs(b0, b1, b2, a1, a2);
    audio_filters_hp_set_enabled(1);
  ) : (
    audio_filters_hp_set_enabled(0);
  );

  // Update lowpass filter coefficients (skip if Off)
  // slider12: 0 = Off, > 0 = enabled
  slider12 > 0 ? (
    calc_biquad(1, min(slider12, 20000));  // 1 = lowpass
    audio_filters_lp_set_coeffs(b0, b1, b2, a1, a2);
    audio_filters_lp_set_enabled(1);
  ) : (
    audio_filters_lp_set_enabled(0);
  );
);
