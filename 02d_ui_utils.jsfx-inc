// UI Utilities Module
// Pure UI utility functions with no dependencies
// Contains control accessor functions and basic UI utilities

@init

// Global variables for slider name parsing (declared here for access)
slider_names_count;
slider_names_loaded;
SLIDER_NAMES_BASE;

//==============================================================================
// CONTROL ACCESSOR FUNCTIONS
//==============================================================================

function get_control_type(index) ( control_defs[index*10 + 0]; );
function get_control_x(index) ( control_defs[index*10 + 1]; );
function get_control_y(index) ( control_defs[index*10 + 2]; );
function get_control_w(index) ( control_defs[index*10 + 3]; );
function get_control_h(index) ( control_defs[index*10 + 4]; );
function get_control_param(index) ( control_defs[index*10 + 5]; );
function get_control_min(index) ( control_defs[index*10 + 6]; );
function get_control_max(index) ( control_defs[index*10 + 7]; );

//==============================================================================
// BASIC UI UTILITIES
//==============================================================================

function is_point_in_control(x, y, control_index) local(ctrl_x, ctrl_y, ctrl_w, ctrl_h) (
  ctrl_x = get_control_x(control_index);
  ctrl_y = get_control_y(control_index);
  ctrl_w = get_control_w(control_index);
  ctrl_h = get_control_h(control_index);
  x >= ctrl_x && x <= ctrl_x + ctrl_w && y >= ctrl_y && y <= ctrl_y + ctrl_h;
);

function update_slider_value(control_index, mouse_x) local(ctrl_x, ctrl_w, min_val, max_val, normalized_pos) (
  ctrl_x = get_control_x(control_index);
  ctrl_w = get_control_w(control_index);
  min_val = get_control_min(control_index);
  max_val = get_control_max(control_index);
  normalized_pos = (mouse_x - ctrl_x) / ctrl_w;
  normalized_pos = max(0, min(1, normalized_pos));
  min_val + normalized_pos * (max_val - min_val);
);

//==============================================================================
// GRAPH COORDINATE FUNCTIONS
//==============================================================================

// These functions convert between dB values and graph coordinates
// They only depend on constants defined in 01e_ui_config.jsfx-inc

function db_to_graph_x(db) (
  GRAPH_X + (db - GRAPH_MIN_DB) / GRAPH_RANGE_DB * GRAPH_SIZE
);

function db_to_graph_y(db) (
  GRAPH_Y + GRAPH_SIZE - (db - GRAPH_MIN_DB) / GRAPH_RANGE_DB * GRAPH_SIZE
);

function graph_x_to_db(x) (
  (x - GRAPH_X) / GRAPH_SIZE * GRAPH_RANGE_DB + GRAPH_MIN_DB
);

function graph_y_to_db(y) (
  GRAPH_MAX_DB - (y - GRAPH_Y) / GRAPH_SIZE * GRAPH_RANGE_DB
);

function is_point_in_graph(x, y) (
  x >= GRAPH_X && x <= GRAPH_X + GRAPH_SIZE &&
  y >= GRAPH_Y && y <= GRAPH_Y + GRAPH_SIZE
);

//==============================================================================
// PARAMETER MANAGEMENT FUNCTIONS
//==============================================================================

function get_parsed_slider_name(index)
local(array_index)
(
  // Return the slider name from string storage (using fixed slots 0-1023)
  (slider_names_loaded && index > 0 && index <= slider_names_count) ? (
    array_index = index - 1; // Convert to 0-based index
    SLIDER_NAMES_BASE + array_index  // Return the slot number directly
  ) : (
    #unknown_str = "Unknown";
    #unknown_str
  );
);

function get_control_label(index) (
  // Use dynamic slider names from JSFX file
  get_parsed_slider_name(index)
);

//==============================================================================
// DROPDOWN OPTIONS FUNCTIONS
//==============================================================================

function get_dropdown_option_count(slider_num) 
local(array_index)
(
  // Convert 1-based slider number to 0-based array index
  array_index = slider_num - 1;
  // Return the number of dropdown options for a slider
  (array_index >= 0 && array_index < slider_names_count) ? (
    dropdown_option_counts_base[array_index]
  ) : (
    0
  );
);

function get_dropdown_option(slider_num, option_index)
local(base_slot, array_index)
(
  // Convert 1-based slider number to 0-based array index
  array_index = slider_num - 1;
  // Return the dropdown option string for a specific slider and option index
  (array_index >= 0 && option_index >= 0 && option_index < get_dropdown_option_count(slider_num)) ? (
    base_slot = DROPDOWN_OPTIONS_BASE + (array_index * 20);
    base_slot + option_index
  ) : (
    #empty_str = "";
    #empty_str
  );
);
