// UI Utilities Module
// Pure UI utility functions and coordinate conversions
// Contains control accessor functions and basic UI utilities
//
// Dependencies:
// - 00a_constants.jsfx-inc (for GRAPH_* and UI constants)
// - 01g_file_reading.jsfx-inc (for get_slider_name function)
// - 01a_memory.jsfx-inc (for control_defs array)

@init

//==============================================================================
// CONTROL ACCESSOR FUNCTIONS
//==============================================================================

function get_control_type(index) ( control_defs[index*10 + 0]; );
function get_control_x(index) ( control_defs[index*10 + 1]; );
function get_control_y(index) ( control_defs[index*10 + 2]; );
function get_control_w(index) ( control_defs[index*10 + 3]; );
function get_control_h(index) ( control_defs[index*10 + 4]; );
function get_control_param(index) ( control_defs[index*10 + 5]; );
function get_control_min(index) ( control_defs[index*10 + 6]; );
function get_control_max(index) ( control_defs[index*10 + 7]; );

//==============================================================================
// BASIC UI UTILITIES
//==============================================================================

function is_point_in_control(x, y, control_index) (
  ctrl_x = get_control_x(control_index);
  ctrl_y = get_control_y(control_index);
  ctrl_w = get_control_w(control_index);
  ctrl_h = get_control_h(control_index);
  x >= ctrl_x && x <= ctrl_x + ctrl_w && y >= ctrl_y && y <= ctrl_y + ctrl_h;
);

function update_slider_value(control_index, mouse_x) (
  ctrl_x = get_control_x(control_index);
  ctrl_w = get_control_w(control_index);
  min_val = get_control_min(control_index);
  max_val = get_control_max(control_index);
  normalized_pos = (mouse_x - ctrl_x) / ctrl_w;
  normalized_pos = max(0, min(1, normalized_pos));
  min_val + normalized_pos * (max_val - min_val);
);

//==============================================================================
// GRAPH COORDINATE FUNCTIONS
//==============================================================================

// These functions convert between dB values and graph coordinates
// They only depend on constants defined in 00a_constants.jsfx-inc

function db_to_graph_x(db) (
  GRAPH_X + (db - GRAPH_MIN_DB) / GRAPH_RANGE_DB * GRAPH_SIZE
);

function db_to_graph_y(db) (
  GRAPH_Y + GRAPH_SIZE - (db - GRAPH_MIN_DB) / GRAPH_RANGE_DB * GRAPH_SIZE
);

function graph_x_to_db(x) (
  (x - GRAPH_X) / GRAPH_SIZE * GRAPH_RANGE_DB + GRAPH_MIN_DB
);

function graph_y_to_db(y) (
  GRAPH_MAX_DB - (y - GRAPH_Y) / GRAPH_SIZE * GRAPH_RANGE_DB
);

function is_point_in_graph(x, y) (
  x >= GRAPH_X && x <= GRAPH_X + GRAPH_SIZE &&
  y >= GRAPH_Y && y <= GRAPH_Y + GRAPH_SIZE
);

//==============================================================================
// COORDINATE CLAMPING HELPERS
//==============================================================================

function clamp_to_graph_bounds(x, y) (
  clamped_x = max(GRAPH_X, min(GRAPH_X + GRAPH_SIZE, x));
  clamped_y = max(GRAPH_Y, min(GRAPH_Y + GRAPH_SIZE, y));
);

function clamp_x_to_graph(x) (
  max(GRAPH_X, min(GRAPH_X + GRAPH_SIZE, x))
);

function clamp_y_to_graph(y) (
  max(GRAPH_Y, min(GRAPH_Y + GRAPH_SIZE, y))
);

//==============================================================================
// DRAWING HELPERS
//==============================================================================

function draw_indicator_circle(x, y, radius, r, g, b, alpha, filled) (
  gfx_set(r, g, b, alpha);
  gfx_circle(x, y, radius, filled, 1); // Always antialiased
);

function draw_text_background(x, y, width, height, corner_radius, bg_alpha) (
  gfx_set(0, 0, 0, bg_alpha);
  gfx_roundrect(x, y, width, height, corner_radius);
);

function draw_curve_segment(end_x, end_y, is_first_point) (
  is_first_point ? (
    gfx_x = end_x;
    gfx_y = end_y;
  ) : (
    gfx_lineto(end_x, end_y, 1); // Antialiased
  );
);
