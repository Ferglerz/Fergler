// Initialization Module
// Contains all constants, persistent state variables, memory allocation,
// and initialization code for the compressor

@init

//==============================================================================
// PERSISTENT STATE VARIABLES (must be in global scope)
//==============================================================================

// Graph state - these need to persist across @init calls
// Use a special flag to track if these have been initialized
!persistent_vars_initialized ? (
  num_points = 6;
  selected_point = -1;
  hovered_point = -1;
  mouse_down = 0;
  mouse_x_prev = 0;
  mouse_y_prev = 0;
  // mouse_moved removed - not used anywhere
  graph_initialized = 0;
  persistent_vars_initialized = 1;
);

//==============================================================================
// CONSTANTS AND CONFIGURATION
//==============================================================================

function init_constants() (
  // Mathematical constants
  LOG10_20 = 20 / log(10);
  LOG_10_20 = log(10) / 20;
  SRATE_INV = 1 / srate;

  // Graph configuration
  GRAPH_X = 50;
  GRAPH_Y = 50;
  GRAPH_SIZE = 350;  // Increased to accommodate more controls (2 rows = ~70px, but making it bigger)
  GRAPH_RANGE_DB = 60; // -30 to +30
  GRAPH_MIN_DB = -30;
  GRAPH_MAX_DB = 30;

  // Point management
  MIN_POINTS = 4;
  MAX_POINTS = 12;
  MOUSE_CLICK_RADIUS = 10;

  // Visual configuration
  GFX_WIDTH = 3500;  // Reduced to match narrower UI panel
  GFX_HEIGHT = 450;  // Increased to accommodate larger graph

  // Math constants
  eps = 0.000000000000000000000000000001; // MUST be a decimal, not scientific notation
);

//==============================================================================
// MEMORY ALLOCATION
//==============================================================================

function allocate_memory() (
  // NEVER touch graph_points here - it's initialized in main @init section
  // graph_points is already set to 10000 and should never change

  // Always allocate audio buffers (these can be reallocated safely)
  freemem = 20000;  // Start audio buffers after graph points
  max_lookahead_samples = ceil(0.01 * srate);
  lookahead_buffer_l = freemem; freemem += max_lookahead_samples;
  lookahead_buffer_r = freemem; freemem += max_lookahead_samples;

  max_rms_samples = ceil(0.1 * srate);
  rms_buffer = freemem; freemem += max_rms_samples;
);

//==============================================================================
// STATE VARIABLES INITIALIZATION
//==============================================================================

function init_state_variables() (
  // Audio processing state
  envelope_out = 1;
  hold_counter = 0;
  rms_sum = 0;
  rms_pos = 0;
  lookahead_pos = 0;

  // Filter states
  hp_x1_l=hp_x2_l=hp_y1_l=hp_y2_l=0;
  hp_x1_r=hp_x2_r=hp_y1_r=hp_y2_r=0;
  lp_x1_l=lp_x2_l=lp_y1_l=lp_y2_l=0;
  lp_x1_r=lp_x2_r=lp_y1_r=lp_y2_r=0;

  // Compressor character state
  compression_history = 0;
  photocell_charge = 0;
  tube_saturation = 0;
  fet_transient_detector = 0;
  program_release_timer = 0;
  average_input_level = 0;
  varimu_release_factor = 1;
  fet_attack_factor_stored = 1;
  optical_program_factor = 1;

  // New character model states
  bridged_diode_env = 0;
  vca_env = 0;
  pwm_env = 0;
  fet_env = 0;
  optical_env = 0;
  tape_env = 0;
  prev_detector_db = 0;

  // RMS normalization state
  rms_max = 0.0001;

  // Program release state
  base_fast_s = 0.05;  // 50ms
  base_med_s = 0.3;    // 300ms
  base_slow_s = 1.0;   // 1000ms
  global_smoothed_gain_db = 0;
  modelGR_dB_prev = 0;

  // Out-of-bounds flags (internal)
  oob_attack = 0;
  oob_release = 0;
  oob_depth = 0;

  // Limiter state variables
  limiter_prev_l = 0;
  limiter_prev_r = 0;
  limiter_oversample_l1 = 0;
  limiter_oversample_l2 = 0;
  limiter_oversample_r1 = 0;
  limiter_oversample_r2 = 0;

  // Feedback detection state
  feedback_l_prev = 0;
  feedback_r_prev = 0;

  // Display state
  current_input_db = GRAPH_MIN_DB;
  current_gr_db = 0;
  
  // graph_initialized should only be set in the global scope or by explicit user action
);

//==============================================================================
// COMPLETE INITIALIZATION
//==============================================================================

function perform_complete_initialization() (
  init_constants();
  allocate_memory();
  init_state_variables();

  // NEVER call init_graph_points() here - points are initialized in main @init only
  // init_ui_constants() is called in main file after all imports
);