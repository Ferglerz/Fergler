// UI Graph Meters Module
// Gain reduction meter and histogram visualization
// Depends on: 00a_constants.jsfx-inc, 05a_ui_threshold_lines.jsfx-inc, 05c_ui_rendering.jsfx-inc

@init

//==============================================================================
// PROCESSING STATE INDICATOR
//==============================================================================

function draw_processing_state_indicator() (
  // Position to the right of the GR meter
  indicator_x = GRAPH_X + GRAPH_SIZE + 15 + 23 + 8;  // meter_x + meter_w + spacing
  indicator_y = GRAPH_Y + GRAPH_SIZE / 2;  // Centered vertically with meter
  indicator_radius = 5;
  
  // Draw background circle (dark gray)
  gfx_set(0.15, 0.15, 0.15, 1);
  gfx_circle(indicator_x, indicator_y, indicator_radius + 1, 1, 1);  // Filled with 1px border
  
  // Draw state indicator
  // Red when processing is skipped (early exit), Green when actively processing
  gr_processing_skipped ? (
    // Red - early exit (no compression happening)
    gfx_set(0.8, 0.2, 0.2, 1);
  ) : (
    // Green - actively compressing
    gfx_set(0.2, 0.8, 0.3, 1);
  );
  gfx_circle(indicator_x, indicator_y, indicator_radius, 1, 1);  // Filled circle
);

//==============================================================================
// GAIN REDUCTION METER
//==============================================================================

function draw_gain_reduction_meter() (
  menu_gr_meter_enabled ? (
    gr_meter_x = GRAPH_X + GRAPH_SIZE + 15;  // 20 * 0.75
    gr_meter_y = GRAPH_Y;
    gr_meter_w = 23;  // 30 * 0.75 = 22.5 rounded up
    gr_meter_h = GRAPH_SIZE;
    meter_center_y = gr_meter_y + gr_meter_h / 2;

    // Draw meter background
    gfx_set(0.2, 0.2, 0.2, 1);
    gfx_rect(gr_meter_x, gr_meter_y, gr_meter_w, gr_meter_h);

  // Draw center line (0dB)
  gfx_set(0.6, 0.6, 0.6, 1);
  gfx_line(gr_meter_x, meter_center_y, gr_meter_x + gr_meter_w, meter_center_y, 1); // Antialiased

  // Check if audio is active (playback state 1 = playing, 5 = recording)
  is_audio_active = (play_state == 1) || (play_state == 5);

  // Only show meter when audio is active
  is_audio_active ? (
    current_gr_db < 0 ? (
      // Gain reduction (negative) - render from top down in orange/red
      // Optimized: use pre-calculated GR_PIXELS_PER_DB constant
      gr_height = abs(current_gr_db) * GR_PIXELS_PER_DB;
      gr_height = min(gr_height, gr_meter_h); // Clamp to full meter
      gfx_set(1, 0.5, 0, 1); // Orange color for reduction
      gfx_rect(gr_meter_x, gr_meter_y, gr_meter_w, gr_height);
    ) : current_gr_db > 0 ? (
      // Gain boost (positive) - render from bottom up in blue
      // Optimized: use pre-calculated GR_PIXELS_PER_DB constant
      gr_height = current_gr_db * GR_PIXELS_PER_DB;
      gr_height = min(gr_height, gr_meter_h); // Clamp to full meter
      gfx_set(0.2, 0.5, 1, 1); // Blue color for boost
      gfx_rect(gr_meter_x, gr_meter_y + gr_meter_h - gr_height, gr_meter_w, gr_height);
    );
  );
  
  // Draw GR blend threshold line if visible
  prog_release_type == 2 ? (
    line_y = gr_blend_db_to_meter_y(gr_blend_threshold_db);
    set_threshold_line_color(THRESHOLD_GR_BLEND, 
      hovered_threshold_line == THRESHOLD_GR_BLEND, 
      dragging_threshold_line == THRESHOLD_GR_BLEND);
    
    // Draw line across meter
    gfx_line(gr_meter_x, line_y, gr_meter_x + gr_meter_w, line_y, 1);
    
    // Draw label
    gfx_x = gr_meter_x + gr_meter_w + 5;
    gfx_y = line_y - 6;
    gfx_printf("%.1f dB", gr_blend_threshold_db);
  );
  );
);

//==============================================================================
// HISTOGRAM HELPERS
//==============================================================================

// Consolidated histogram function for scrolling display (newest data on right)
// mode: 0=input, 1=GR negative, 2=GR positive
// is_pixel_buffer: 1=per-pixel mode, 0=circular buffer mode
function draw_histogram_line_generic(buffer, buffer_pos, max_samples, r, g, b, a, mode, is_pixel_buffer) local(
  samples_span, width_pixels, step_size, first_point, i, age, sample_idx, level_db, gr_value, x_pos, y_pos, gr_height, value, buffer_idx
) (
  gfx_set(r, g, b, a);
  first_point = 1;
  i = 0;

  is_pixel_buffer ? (
    // Per-pixel buffer mode - scroll through buffer with current position offset
    while (i < GRAPH_SIZE) (
      // Calculate buffer index with scrolling offset (newest data on right)
      // buffer_pos points to the current "write" position
      // We want to show data from oldest to newest (left to right)
      buffer_idx = (buffer_pos + i) % GRAPH_SIZE;
      value = buffer[buffer_idx];
      x_pos = GRAPH_X + i;

      // Mode-specific value calculation and filtering
      mode == 0 ? ( // Input histogram
        value > GRAPH_MIN_DB ? (
          y_pos = HISTOGRAM_Y_OFFSET - value * DB_TO_PIXEL_SCALE;
          first_point ? (
            gfx_x = x_pos; gfx_y = y_pos; first_point = 0;
          ) : (
            gfx_lineto(x_pos, y_pos, 1);
          );
        ) : (
          first_point = 1;
        );
      ) : mode == 1 ? ( // GR negative (reduction from top)
        value < 0 ? (
          gr_height = abs(value) * GR_PIXELS_PER_DB;
          y_pos = GRAPH_Y + gr_height;
          first_point ? (
            gfx_x = x_pos; gfx_y = y_pos; first_point = 0;
          ) : (
            gfx_lineto(x_pos, y_pos, 1);
          );
        ) : (
          first_point = 1;
        );
      ) : ( // GR positive (boost from bottom)
        value > 0 ? (
          gr_height = abs(value) * GR_PIXELS_PER_DB;
          y_pos = GRAPH_Y + GRAPH_SIZE - gr_height;
          first_point ? (
            gfx_x = x_pos; gfx_y = y_pos; first_point = 0;
          ) : (
            gfx_lineto(x_pos, y_pos, 1);
          );
        ) : (
          first_point = 1;
        );
      );

      i += 1;
    );
  ) : (
    // Circular buffer mode - sample with interpolation
    samples_span = max_samples;
    width_pixels = GRAPH_SIZE;
    step_size = HISTOGRAM_STEP_SIZE;

    while (i < width_pixels) (
      age = floor((width_pixels - 1 - i) * (samples_span - 1) / (width_pixels - 1));
      sample_idx = (buffer_pos - 1 - age + samples_span) % samples_span;
      value = buffer[sample_idx];
      x_pos = GRAPH_X + i;

      // Mode-specific value calculation and filtering
      mode == 0 ? ( // Input histogram
        value > GRAPH_MIN_DB ? (
          y_pos = HISTOGRAM_Y_OFFSET - value * DB_TO_PIXEL_SCALE;
          first_point ? (
            gfx_x = x_pos; gfx_y = y_pos; first_point = 0;
          ) : (
            gfx_lineto(x_pos, y_pos, 1);
          );
        ) : (
          first_point = 1;
        );
      ) : mode == 1 ? ( // GR negative (reduction from top)
        value < 0 ? (
          gr_height = abs(value) * GR_PIXELS_PER_DB;
          y_pos = GRAPH_Y + gr_height;
          first_point ? (
            gfx_x = x_pos; gfx_y = y_pos; first_point = 0;
          ) : (
            gfx_lineto(x_pos, y_pos, 1);
          );
        ) : (
          first_point = 1;
        );
      ) : ( // GR positive (boost from bottom)
        value > 0 ? (
          gr_height = abs(value) * GR_PIXELS_PER_DB;
          y_pos = GRAPH_Y + GRAPH_SIZE - gr_height;
          first_point ? (
            gfx_x = x_pos; gfx_y = y_pos; first_point = 0;
          ) : (
            gfx_lineto(x_pos, y_pos, 1);
          );
        ) : (
          first_point = 1;
        );
      );

      i += step_size;
    );
  );
);


//==============================================================================
// INPUT HISTOGRAM
//==============================================================================

function draw_input_histogram() (
  INPUT_HISTOGRAM_ENABLED && menu_histogram_enabled ? (
    menu_histogram_buffer_mode > 0.5 ? (
      // PER-PIXEL BUFFER MODE: Draw directly from pixel buffer
      input_histogram_pixel_initialized ? (
        draw_histogram_line_generic(
          input_histogram_pixel_buffer,
          histogram_pixel_idx,
          0,
          INPUT_HISTOGRAM_COLOR_R,
          INPUT_HISTOGRAM_COLOR_G,
          INPUT_HISTOGRAM_COLOR_B,
          INPUT_HISTOGRAM_OPACITY,
          0, // mode: input histogram
          1  // is_pixel_buffer: true
        );
      );
    ) : (
      // CIRCULAR BUFFER MODE: Draw from circular buffer
      input_histogram_initialized ? (
        draw_histogram_line_generic(
          input_histogram_buffer,
          input_histogram_pos,
          input_histogram_max_samples,
          INPUT_HISTOGRAM_COLOR_R,
          INPUT_HISTOGRAM_COLOR_G,
          INPUT_HISTOGRAM_COLOR_B,
          INPUT_HISTOGRAM_OPACITY,
          0, // mode: input histogram
          0  // is_pixel_buffer: false
        );
      );
    );
  );
);

//==============================================================================
// HISTOGRAM
//==============================================================================

function draw_histogram() (
  HISTOGRAM_ENABLED && menu_histogram_enabled ? (
    menu_histogram_buffer_mode > 0.5 ? (
      // PER-PIXEL BUFFER MODE: Draw directly from pixel buffer
      histogram_pixel_initialized ? (
        // Draw negative (reduction) line (orange, from top)
        draw_histogram_line_generic(
          histogram_pixel_buffer,
          histogram_pixel_idx,
          0,
          1, 0.5, 0, // Orange
          HISTOGRAM_OPACITY,
          1, // mode: GR negative
          1  // is_pixel_buffer: true
        );
        
        // Draw positive (addition) line (blue, from bottom)
        draw_histogram_line_generic(
          histogram_pixel_buffer,
          histogram_pixel_idx,
          0,
          0.2, 0.5, 1, // Blue
          HISTOGRAM_OPACITY,
          2, // mode: GR positive
          1  // is_pixel_buffer: true
        );
      );
    ) : (
      // CIRCULAR BUFFER MODE: Draw negative (reduction) and positive (addition) GR as separate lines
      histogram_initialized ? (
        // Draw negative (reduction) line (orange, from top)
        draw_histogram_line_generic(
          histogram_buffer,
          histogram_pos,
          histogram_max_samples,
          1, 0.5, 0, // Orange
          HISTOGRAM_OPACITY,
          1, // mode: GR negative
          0  // is_pixel_buffer: false
        );
        
        // Draw positive (addition) line (blue, from bottom)
        draw_histogram_line_generic(
          histogram_buffer,
          histogram_pos,
          histogram_max_samples,
          0.2, 0.5, 1, // Blue
          HISTOGRAM_OPACITY,
          2, // mode: GR positive
          0  // is_pixel_buffer: false
        );
      );
    );
  );
);

