// UI Rendering - Controls Module
// Generic control rendering (sliders, buttons, dropdowns) and dispatcher
// Dependencies: 01_Utils/01_constants.jsfx-inc, 01_Utils/04_file_reading.jsfx-inc, 04_UI/01_ui_constants.jsfx-inc

@init

//==============================================================================
// GENERIC SLIDER RENDERING
//==============================================================================

function draw_generic_slider(x, y, w, h, value, min_val, max_val, label, slider_type, display_mode) local(label_w, label_h, value_str_w, value_str_h, fill_direction, formatted_str) (
  // Calculate normalized position
  normalized_pos = (value - min_val) / (max_val - min_val);
  
  // Draw label - center aligned for horizontal sliders
  gfx_set(TEXT_R, TEXT_G, TEXT_B, 1);
  slider_type == 1 ? ( // Vertical slider
    gfx_x = x + w + 8; gfx_y = y;
  ) : ( // Horizontal slider - center align
    gfx_measurestr(label, label_w, label_h);
    gfx_x = x + (w - label_w) / 2;
    gfx_y = y - LABEL_HEIGHT;
  );
  gfx_drawstr(label);

  slider_type == 1 ? ( // Vertical slider
    // Draw slider background
    gfx_set(SLIDER_BG_R, SLIDER_BG_G, SLIDER_BG_B, 1);
    gfx_rect(x, y, w, h);

    // Draw slider fill from bottom
    fill_h = normalized_pos * h;
    gfx_set(SLIDER_FILL_R, SLIDER_FILL_G, SLIDER_FILL_B, 1);
    gfx_rect(x, y + h - fill_h, w, fill_h);

    // Draw handle
    handle_y = y + h - fill_h - 3;
    gfx_set(1, 1, 1, 1);
    gfx_rect(x - 2, handle_y, w + 4, 6);

    // Draw value text (if not hidden)
    display_mode != 2 ? (
      gfx_set(TEXT_R, TEXT_G, TEXT_B, 1);
      gfx_x = x + w + 8; gfx_y = y + h/2;
      gfx_printf("%.2f", value);
    );
  ) : ( // Horizontal slider (includes both normal and reverse)
    // Draw slider background
    gfx_set(SLIDER_BG_R, SLIDER_BG_G, SLIDER_BG_B, 1);
    gfx_rect(x, y, w, h);

    // Draw slider fill based on fill direction
    fill_w = normalized_pos * w;
    
    // Get fill direction from slider properties (default to left-to-right for backward compatibility)
    fill_direction = slider_type == 2 ? SLIDER_FILL_RIGHT_TO_LEFT : SLIDER_FILL_LEFT_TO_RIGHT;
    
    fill_direction == SLIDER_FILL_RIGHT_TO_LEFT ? (
      // Fill from RIGHT edge to fader position
      fill_start_x = x + fill_w;
      fill_width = w - fill_w;
      gfx_set(SLIDER_FILL_R, SLIDER_FILL_G, SLIDER_FILL_B, 1);
      gfx_rect(fill_start_x, y, fill_width, h);
    ) : fill_direction == SLIDER_FILL_CENTER_OUT ? (
      // Fill from center to fader position (both directions)
      center_x = x + w * 0.5;
      fader_x = x + fill_w;
      
      // Fill left side (from center to fader if fader is right of center)
      fader_x > center_x ? (
        gfx_set(SLIDER_FILL_R, SLIDER_FILL_G, SLIDER_FILL_B, 1);
        gfx_rect(center_x, y, fader_x - center_x, h);
      );
      
      // Fill right side (from center to fader if fader is left of center)
      fader_x < center_x ? (
        gfx_set(SLIDER_FILL_R, SLIDER_FILL_G, SLIDER_FILL_B, 1);
        gfx_rect(fader_x, y, center_x - fader_x, h);
      );
    ) : (
      // Default: Fill from LEFT edge to fader position
      gfx_set(SLIDER_FILL_R, SLIDER_FILL_G, SLIDER_FILL_B, 1);
      gfx_rect(x, y, fill_w, h);
    );

    // Draw handle
    handle_x = x + fill_w - 3;
    gfx_set(1, 1, 1, 1);
    gfx_rect(handle_x, y - 2, 6, h + 4);

    // Draw value text (if not hidden)
    display_mode != 2 ? (
      // Use standard numeric formatting (no special frequency formatting in generic slider)
      sprintf(#value_str, "%.2f", value);
      gfx_measurestr(#value_str, value_str_w, value_str_h);
      
      // Smart positioning: left-anchored when >50%, right-anchored when <50%
      normalized_pos > 0.5 ? (
        // >50%: Anchor left, black text
        gfx_set(0, 0, 0, 1);  // Black
        gfx_x = x + 3;
      ) : (
        // <50%: Anchor right, white text
        gfx_set(1, 1, 1, 1);  // White
        gfx_x = x + w - value_str_w - 3;
      );
      gfx_y = y + (h - value_str_h) / 2;  // Center vertically
      gfx_drawstr(#value_str);
    );
  );
);

//==============================================================================
// FREQUENCY SLIDER RENDERING (with property system)
//==============================================================================

function draw_frequency_slider(x, y, w, h, value, min_val, max_val, label, control_index, slider_type, display_mode) local(label_w, label_h, value_str_w, value_str_h, fill_direction, formatted_str) (
  // Calculate normalized position
  normalized_pos = (value - min_val) / (max_val - min_val);
  
  // Draw label - center aligned for horizontal sliders
  gfx_set(TEXT_R, TEXT_G, TEXT_B, 1);
  gfx_measurestr(label, label_w, label_h);
  gfx_x = x + (w - label_w) / 2;
  gfx_y = y - LABEL_HEIGHT;
  gfx_drawstr(label);

  // Draw slider background
  gfx_set(SLIDER_BG_R, SLIDER_BG_G, SLIDER_BG_B, 1);
  gfx_rect(x, y, w, h);

  // Draw slider fill based on fill direction from properties
  fill_w = normalized_pos * w;
  fill_direction = get_slider_fill_direction(control_index);
  
  fill_direction == SLIDER_FILL_RIGHT_TO_LEFT ? (
    // Fill from RIGHT edge to fader position
    fill_start_x = x + fill_w;
    fill_width = w - fill_w;
    gfx_set(SLIDER_FILL_R, SLIDER_FILL_G, SLIDER_FILL_B, 1);
    gfx_rect(fill_start_x, y, fill_width, h);
  ) : fill_direction == SLIDER_FILL_CENTER_OUT ? (
    // Fill from center to fader position (both directions)
    center_x = x + w * 0.5;
    fader_x = x + fill_w;
    
    // Fill left side (from center to fader if fader is right of center)
    fader_x > center_x ? (
      gfx_set(SLIDER_FILL_R, SLIDER_FILL_G, SLIDER_FILL_B, 1);
      gfx_rect(center_x, y, fader_x - center_x, h);
    );
    
    // Fill right side (from center to fader if fader is left of center)
    fader_x < center_x ? (
      gfx_set(SLIDER_FILL_R, SLIDER_FILL_G, SLIDER_FILL_B, 1);
      gfx_rect(fader_x, y, center_x - fader_x, h);
    );
  ) : (
    // Default: Fill from LEFT edge to fader position
    gfx_set(SLIDER_FILL_R, SLIDER_FILL_G, SLIDER_FILL_B, 1);
    gfx_rect(x, y, fill_w, h);
  );

  // Draw handle
  handle_x = x + fill_w - 3;
  gfx_set(1, 1, 1, 1);
  gfx_rect(handle_x, y - 2, 6, h + 4);

  // Draw value text (if not hidden)
  display_mode != 2 ? (
    // Use property-based formatting
    formatted_str = format_slider_value(control_index, value);
    gfx_measurestr(formatted_str, value_str_w, value_str_h);
    
    // Smart positioning: left-anchored when >50%, right-anchored when <50%
    normalized_pos > 0.5 ? (
      // >50%: Anchor left, black text
      gfx_set(0, 0, 0, 1);  // Black
      gfx_x = x + 3;
    ) : (
      // <50%: Anchor right, white text
      gfx_set(1, 1, 1, 1);  // White
      gfx_x = x + w - value_str_w - 3;
    );
    gfx_y = y + (h - value_str_h) / 2;  // Center vertically
    gfx_drawstr(formatted_str);
  );
);

//==============================================================================
// FREQUENCY LIST SLIDER RENDERING (legacy - will be removed)
//==============================================================================

function draw_freq_list_slider(x, y, w, h, value, min_val, max_val, label, param_index, slider_type, display_mode) local(option_count, value_index, normalized_pos, reverse_mode, cache_key, label_w, label_h, value_str_w, value_str_h) (
  // Frequency list slider - looks like a slider but snaps to discrete frequency values
  // Supports both left-to-right (normal) and right-to-left (reverse) rendering
  
  // Draw label - center aligned
  gfx_set(TEXT_R, TEXT_G, TEXT_B, 1);
  gfx_measurestr(label, label_w, label_h);
  gfx_x = x + (w - label_w) / 2;
  gfx_y = y - LABEL_HEIGHT;
  gfx_drawstr(label);

  // Get enumerated options to calculate correct position
  option_count = get_dropdown_option_count(param_index);
  
  option_count > 0 ? (
    // Get the index from our cached reverse lookup table (O(1) lookup)
    value_index = get_freq_list_index(param_index, value);
    
    // Get the actual discrete frequency value from our cached enumerated list
    // This ensures we ONLY display values from the list we cached at init
    freq_value = get_dropdown_option_value(param_index, value_index);
    
    // Calculate normalized position based on index in enumerated list
    reverse_mode = (slider_type == 2);
    reverse_mode ? (
      // For reverse sliders, first option is at right (1.0), last option is at left (0.0)
      normalized_pos = 1.0 - (value_index / (option_count - 1));
    ) : (
      // For normal sliders, first option is at left (0.0), last option is at right (1.0)
      normalized_pos = value_index / (option_count - 1);
    );
  ) : (
    // Fallback: no enumerated options, use continuous range
    normalized_pos = (value - min_val) / (max_val - min_val);
    freq_value = value;
  );

  // Check if this is a reverse slider (slider_type == 2)
  slider_type == 2 ? (
    // REVERSE SLIDER - grey background with yellow/ochre fill from RIGHT to fader
    gfx_set(SLIDER_BG_R, SLIDER_BG_G, SLIDER_BG_B, 1);
    gfx_rect(x, y, w, h);

    // Draw slider fill from RIGHT to fader position
    fill_w = normalized_pos * w;
    fill_start_x = x + fill_w;
    fill_width = w - fill_w;
    gfx_set(SLIDER_FILL_R, SLIDER_FILL_G, SLIDER_FILL_B, 1);
    gfx_rect(fill_start_x, y, fill_width, h);

    // Draw handle
    handle_x = x + fill_w - 3;
    gfx_set(1, 1, 1, 1);
    gfx_rect(handle_x, y - 2, 6, h + 4);
  ) : (
    // NORMAL SLIDER - fills from left, gray background
    gfx_set(SLIDER_BG_R, SLIDER_BG_G, SLIDER_BG_B, 1);
    gfx_rect(x, y, w, h);

    // Draw slider fill
    fill_w = normalized_pos * w;
    gfx_set(SLIDER_FILL_R, SLIDER_FILL_G, SLIDER_FILL_B, 1);
    gfx_rect(x, y, fill_w, h);

    // Draw handle
    handle_x = x + fill_w - 3;
    gfx_set(1, 1, 1, 1);
    gfx_rect(handle_x, y - 2, 6, h + 4);
  );

  // Format frequency for display
  // Both HP and LP: 0 = Off
  freq_value == 0 ? (
    sprintf(#freq_display_str, "Off");
  ) : freq_value > 999 ? (
    // Display as kHz (for values over 999)
    freq_khz = freq_value / 1000;
    freq_khz == floor(freq_khz) ? (
      sprintf(#freq_display_str, "%.0fk", freq_khz);
    ) : (
      sprintf(#freq_display_str, "%.1fk", freq_khz);
    );
  ) : (
    // Display as Hz
    sprintf(#freq_display_str, "%.0f", freq_value);
  );
  
  // Draw formatted frequency text (if not hidden)
  // Smart positioning: left-anchored when >50%, right-anchored when <50%
  // For normal sliders: Black text when left-anchored, white when right-anchored
  // For reverse sliders: White text when left-anchored, black when right-anchored (inverted)
  display_mode != 2 ? (
    gfx_measurestr(#freq_display_str, value_str_w, value_str_h);
    
    slider_type == 2 ? (
      // REVERSE SLIDER: Inverted color logic
      normalized_pos > 0.5 ? (
        // >50%: Anchor left, white text (inverted)
        gfx_set(1, 1, 1, 1);  // White
        gfx_x = x + 3;
      ) : (
        // <50%: Anchor right, black text (inverted)
        gfx_set(0, 0, 0, 1);  // Black
        gfx_x = x + w - value_str_w - 3;
      );
    ) : (
      // NORMAL SLIDER: Standard color logic
      normalized_pos > 0.5 ? (
        // >50%: Anchor left, black text
        gfx_set(0, 0, 0, 1);  // Black
        gfx_x = x + 3;
      ) : (
        // <50%: Anchor right, white text
        gfx_set(1, 1, 1, 1);  // White
        gfx_x = x + w - value_str_w - 3;
      );
    );
    gfx_y = y + (h - value_str_h) / 2;  // Center vertically
    gfx_drawstr(#freq_display_str);
  );
);

//==============================================================================
// BUTTON RENDERING
//==============================================================================

function draw_generic_button(x, y, w, h, is_on, label) (
  // Draw button background
  is_on ? (
    gfx_set(BUTTON_ON_R, BUTTON_ON_G, BUTTON_ON_B, 1);
  ) : (
    gfx_set(BUTTON_OFF_R, BUTTON_OFF_G, BUTTON_OFF_B, 1);
  );
  gfx_rect(x, y, w, h);

  // Draw button border
  gfx_set(0.6, 0.6, 0.6, 1);
  gfx_rect(x, y, w, h, 0);

  // Draw button text
  gfx_set(TEXT_R, TEXT_G, TEXT_B, 1);
  gfx_x = x + 5; gfx_y = y + 5;
  gfx_drawstr(label);
);

//==============================================================================
// DROPDOWN RENDERING
//==============================================================================

function draw_generic_dropdown(x, y, w, h, current_value, label, param_index) (
  current_index = floor(current_value);
  
  // Draw label
  gfx_set(TEXT_R, TEXT_G, TEXT_B, 1);
  gfx_x = x; gfx_y = y - LABEL_HEIGHT;
  gfx_drawstr(label);

  // Draw dropdown background
  gfx_set(SLIDER_BG_R, SLIDER_BG_G, SLIDER_BG_B, 1);
  gfx_rect(x, y, w, h);

  // Draw dropdown border
  gfx_set(0.6, 0.6, 0.6, 1);
  gfx_rect(x, y, w, h, 0);

  // Draw current selection text
  gfx_set(TEXT_R, TEXT_G, TEXT_B, 1);
  gfx_x = x + 5; gfx_y = y + 5;

  // Display text using dynamic dropdown options
  get_dropdown_option_count(param_index) > 0 ? (
    // Use dynamically extracted dropdown options
    current_index < get_dropdown_option_count(param_index) ? (
      gfx_drawstr(get_dropdown_option(param_index, current_index));
    ) : (
      gfx_drawstr("Unknown");
    );
  ) : (
    // Fallback for non-dropdown parameters
    gfx_printf("%.0f", current_value);
  );

  // Draw dropdown arrow
  gfx_x = x + w - 15; gfx_y = y + 8;
  gfx_drawstr("v");
);

//==============================================================================
// GENERIC CONTROL DISPATCHER
//==============================================================================

function draw_control(index) local(group_idx) (
  type = get_control_type(index);
  x = get_control_x(index);
  y = get_control_y(index);
  w = get_control_w(index);
  h = get_control_h(index);
  param_index = get_control_param(index);
  min_val = get_control_min(index);
  max_val = get_control_max(index);
  slider_type = get_control_slider_type(index);
  display_mode = get_control_display_mode(index);
  group_idx = get_control_group(index);
  
  // Add group offset if control is in a group
  group_idx >= 0 ? (
    x += get_group_x(group_idx);
    y += get_group_y(group_idx);
  );
  
  // Get current parameter value
  current_value = slider(param_index);
  
  // Check if this is a stage enable button (param indices 27-31)
  is_stage_enable_button = (param_index >= 27 && param_index <= 31);
  
  // Only render stage enable buttons when debug is disabled
  is_stage_enable_button && !DEBUG_ENABLED ? (
    // Skip rendering stage enable buttons when debug is enabled
    0;
  ) : (
    // Check if this is a frequency slider (HP/LP filters) that should use special rendering
    (index == 10 || index == 11) ? (
      // HP and LP filters use frequency slider with property system
      draw_frequency_slider(x, y, w, h, current_value, min_val, max_val, get_slider_name(param_index), index, slider_type, display_mode)
    ) : (
      // All other controls use standard rendering
      type == 0 ? draw_generic_slider(x, y, w, h, current_value, min_val, max_val, get_slider_name(param_index), slider_type, display_mode) :
      type == 1 ? draw_generic_button(x, y, w, h, current_value > 0.5, get_slider_name(param_index)) :
      type == 2 ? draw_generic_dropdown(x, y, w, h, current_value, get_slider_name(param_index), param_index) :
      type == 3 ? draw_generic_knob(x, y, current_value, min_val, max_val, get_slider_name(param_index)) :
      type == 4 ? draw_freq_list_slider(x, y, w, h, current_value, min_val, max_val, get_slider_name(param_index), param_index, slider_type, display_mode) :
      0;
    );
  );
);

