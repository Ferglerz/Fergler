// Graph Management Module
// Handles interactive compression curve editing, point manipulation, and curve interpolation
// Functions for managing graph points, sorting, adding/deleting points, and curve mathematics

@init


//==============================================================================
// GRAPH DATA MANAGEMENT
//==============================================================================

function init_graph_points() (
  // Initialize points on diagonal line (1:1 compression)
  graph_points[0] = GRAPH_MIN_DB; graph_points[1] = GRAPH_MIN_DB; graph_points[2] = 0;
  graph_points[3] = -18; graph_points[4] = -18; graph_points[5] = DEFAULT_KNEE_SIZE;
  graph_points[6] = -6;  graph_points[7] = -6;  graph_points[8] = DEFAULT_KNEE_SIZE;
  graph_points[9] = 6;   graph_points[10] = 6;  graph_points[11] = DEFAULT_KNEE_SIZE;
  graph_points[12] = 18; graph_points[13] = 18; graph_points[14] = DEFAULT_KNEE_SIZE;
  graph_points[15] = GRAPH_MAX_DB; graph_points[16] = GRAPH_MAX_DB; graph_points[17] = 0;
);

function sort_points() local(i, j, temp_in, temp_out, temp_knee) (
  i = 1;
  while (i < num_points - 2) (
    j = i + 1;
    while (j < num_points - 1) (
      graph_points[i*3] > graph_points[j*3] ? (
        temp_in = graph_points[i*3];
        temp_out = graph_points[i*3 + 1];
        temp_knee = graph_points[i*3 + 2];

        graph_points[i*3] = graph_points[j*3];
        graph_points[i*3 + 1] = graph_points[j*3 + 1];
        graph_points[i*3 + 2] = graph_points[j*3 + 2];

        graph_points[j*3] = temp_in;
        graph_points[j*3 + 1] = temp_out;
        graph_points[j*3 + 2] = temp_knee;
      );
      j += 1;
    );
    i += 1;
  );
);

function add_point(input_db, output_db) local(insert_pos, i, new_point_index) (
  num_points >= MAX_POINTS ? -1 : (
    insert_pos = num_points - 1;

    i = num_points;
    while (i > insert_pos) (
      graph_points[i*3] = graph_points[(i-1)*3];
      graph_points[i*3 + 1] = graph_points[(i-1)*3 + 1];
      graph_points[i*3 + 2] = graph_points[(i-1)*3 + 2];
      i -= 1;
    );

    graph_points[insert_pos*3] = input_db;
    graph_points[insert_pos*3 + 1] = output_db;
    graph_points[insert_pos*3 + 2] = DEFAULT_KNEE_SIZE;

    num_points += 1;
    sort_points();

    // Find the new index of the added point after sorting
    new_point_index = 0;
    i = 0;
    while (i < num_points) (
      abs(graph_points[i*3] - input_db) < 0.01 && abs(graph_points[i*3 + 1] - output_db) < 0.01 ? (
        new_point_index = i;
        i = num_points; // break
      ) : (
        i += 1;
      );
    );
    new_point_index;
  );
);

function delete_point(point_index) local(i) (
  point_index <= 0 || point_index >= num_points - 1 || num_points <= MIN_POINTS ? 0 : (
    i = point_index;
    while (i < num_points - 1) (
      graph_points[i*3] = graph_points[(i+1)*3];
      graph_points[i*3 + 1] = graph_points[(i+1)*3 + 1];
      graph_points[i*3 + 2] = graph_points[(i+1)*3 + 2];
      i += 1;
    );
    num_points -= 1;
    1;
  );
);

function find_point_at_mouse(x, y) local(i, point_x, point_y, dist_sq) (
  i = 0;
  while (i < num_points) (
    point_x = db_to_graph_x(graph_points[i*3]);
    point_y = db_to_graph_y(graph_points[i*3 + 1]);
    dist_sq = (x - point_x) * (x - point_x) + (y - point_y) * (y - point_y);
    dist_sq < MOUSE_CLICK_RADIUS * MOUSE_CLICK_RADIUS ? (
      i; // Return point index
    ) : (
      i += 1;
    );
  );
  -1; // No point found
);


//==============================================================================
// MOUSE INTERACTION HANDLERS
//==============================================================================

function handle_point_movement() local(new_input_db, new_output_db, i, old_input_db) (
  new_input_db = clamp(graph_x_to_db(mouse_x), GRAPH_MIN_DB, GRAPH_MAX_DB);
  new_output_db = clamp(graph_y_to_db(mouse_y), GRAPH_MIN_DB, GRAPH_MAX_DB);

  // Store old position for sorting lookup
  old_input_db = graph_points[selected_point*3];

  // Constrain corner points
  selected_point == 0 ? (
    new_input_db = GRAPH_MIN_DB;
    new_output_db = GRAPH_MIN_DB;
  ) : selected_point == num_points - 1 ? (
    new_input_db = GRAPH_MAX_DB;
    new_output_db = GRAPH_MAX_DB;
  );

  // Update point position
  graph_points[selected_point*3] = new_input_db;
  graph_points[selected_point*3 + 1] = new_output_db;

  // For middle points, handle sorting and find new index
  selected_point > 0 && selected_point < num_points - 1 ? (
    // Only sort if input position actually changed significantly
    abs(new_input_db - old_input_db) > 0.1 ? (
      sort_points();

      // Find the moved point's new index
      i = 0;
      while (i < num_points) (
        abs(graph_points[i*3] - new_input_db) < 0.01 && abs(graph_points[i*3 + 1] - new_output_db) < 0.01 ? (
          selected_point = i;
          i = num_points; // break
        ) : (
          i += 1;
        );
      );
    );
  );
);

function handle_knee_adjustment() local(knee_delta) (
  knee_delta = (mouse_y - mouse_y_prev) * 0.05;
  graph_points[selected_point*3 + 2] = clamp(graph_points[selected_point*3 + 2] + knee_delta, 0, 10);
);

function handle_point_addition() local(new_input_db, new_output_db) (
  new_input_db = clamp(graph_x_to_db(mouse_x), GRAPH_MIN_DB, GRAPH_MAX_DB);
  new_output_db = clamp(graph_y_to_db(mouse_y), GRAPH_MIN_DB, GRAPH_MAX_DB);
  add_point(new_input_db, new_output_db);
);

function handle_point_deletion() local(point_to_delete) (
  point_to_delete = find_point_at_mouse(mouse_x, mouse_y);
  point_to_delete > 0 && point_to_delete < num_points - 1 ? (
    delete_point(point_to_delete);
  );
);

function process_mouse_input() (
  mouse_cap & 1 ? ( // Left mouse button pressed
    !mouse_down ? (
      // Mouse just pressed down
      mouse_down = 1;
      mouse_moved = 0; // Track if mouse has moved during this click

      mouse_cap & 16 ? ( // Alt+click = delete point
        handle_point_deletion();
        selected_point = -1;
      ) : (
        // Normal click - find point under mouse
        selected_point = find_point_at_mouse(mouse_x, mouse_y);
      );

      mouse_x_prev = mouse_x;
      mouse_y_prev = mouse_y;
    ) : (
      // Mouse is being held down
      // Check if mouse has moved enough to be considered a drag
      abs(mouse_x - mouse_x_prev) > 2 || abs(mouse_y - mouse_y_prev) > 2 ? (
        mouse_moved = 1;
      );

      selected_point >= 0 ? (
        // We have a selected point
        mouse_moved ? (
          // Mouse has moved - drag the point
          mouse_cap & 4 || mouse_cap & 8 || mouse_cap & 32 ? (
            // Ctrl/Shift/Cmd + drag = adjust knee
            handle_knee_adjustment();
          ) : (
            // Normal drag = move point
            handle_point_movement();
          );
        );
        // If mouse hasn't moved yet, do nothing (wait for movement)
      );

      mouse_x_prev = mouse_x;
      mouse_y_prev = mouse_y;
    );
  ) : mouse_cap & 2 ? ( // Right mouse button
    !mouse_down ? (
      handle_point_deletion();
    );
  ) : (
    // Mouse button released
    mouse_down == 1 && !mouse_moved && selected_point == -1 ? (
      // This was a click (not drag) in empty space - add point
      is_point_in_graph(mouse_x, mouse_y) ? (
        selected_point = handle_point_addition();
      );
    );

    // Reset state
    mouse_down = 0;
    selected_point = -1;
    mouse_moved = 0;
  );
);