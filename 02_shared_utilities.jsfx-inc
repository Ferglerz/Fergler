// Shared Utilities Module
// Contains common functions used across multiple modules
// Including coordinate conversion, mathematical utilities, and curve interpolation

@init

//==============================================================================
// MATHEMATICAL UTILITY FUNCTIONS
//==============================================================================

function db_to_linear(db) (
  exp(db * LOG_10_20)
);

function linear_to_db(linear) (
  linear > 0 ? log(linear) * LOG10_20 : -150
);

function clamp(value, min_val, max_val) (
  max(min_val, min(max_val, value))
);

// Helper function for tanh (hyperbolic tangent)
function tanh(x) (
  x > 10 ? 1 : (
    x < -10 ? -1 : (
      (exp(2*x) - 1) / (exp(2*x) + 1)
    )
  )
);

// Helper function for atan (arctangent)
function atan(x) (
  abs(x) > 1 ? (
    x > 0 ? $pi/2 - atan(1/x) : -$pi/2 - atan(1/x)
  ) : (
    // Taylor series approximation for |x| <= 1
    x - x*x*x/3 + x*x*x*x*x/5 - x*x*x*x*x*x*x/7
  )
);

// Helper function for pow (power function)
function pow(base, exponent) (
  base > 0 ? exp(exponent * log(base)) : (
    base == 0 ? (exponent > 0 ? 0 : 1) : (
      // Handle negative base (assuming integer exponent)
      exp(exponent * log(abs(base))) * (exponent % 2 == 0 ? 1 : -1)
    )
  )
);

//==============================================================================
// GRAPH COORDINATE FUNCTIONS
//==============================================================================

function db_to_graph_x(db) (
  GRAPH_X + (db - GRAPH_MIN_DB) / GRAPH_RANGE_DB * GRAPH_SIZE
);

function db_to_graph_y(db) (
  GRAPH_Y + GRAPH_SIZE - (db - GRAPH_MIN_DB) / GRAPH_RANGE_DB * GRAPH_SIZE
);

function graph_x_to_db(x) (
  (x - GRAPH_X) / GRAPH_SIZE * GRAPH_RANGE_DB + GRAPH_MIN_DB
);

function graph_y_to_db(y) (
  GRAPH_MAX_DB - (y - GRAPH_Y) / GRAPH_SIZE * GRAPH_RANGE_DB
);

function is_point_in_graph(x, y) (
  x >= GRAPH_X && x <= GRAPH_X + GRAPH_SIZE &&
  y >= GRAPH_Y && y <= GRAPH_Y + GRAPH_SIZE
);

//==============================================================================
// COMPRESSION CURVE MATH
//==============================================================================


function interpolate_compression_curve(input_db) local(i, x1, y1, x2, y2, t) (
  // Bounds checking
  input_db <= graph_points[0] ? graph_points[1] : (
    input_db >= graph_points[(num_points-1)*2] ? graph_points[(num_points-1)*2 + 1] : (
      // Find the segment
      i = 0;
      while (i < num_points - 1 && graph_points[(i+1)*2] < input_db) (
        i += 1;
      );

      // Get the segment endpoints
      x1 = graph_points[i*2];
      y1 = graph_points[i*2 + 1];

      x2 = graph_points[(i+1)*2];
      y2 = graph_points[(i+1)*2 + 1];

      // Calculate t parameter and do linear interpolation
      t = clamp((input_db - x1) / (x2 - x1), 0, 1);
      y1 + t * (y2 - y1)
    )
  )
);

