// Filter Processing Module
// Filter processing including biquad filters for detection signal filtering
// Applies to whichever detection signal is active (regular or sidechain)
// Depends on: 00b_math_utils.jsfx-inc, 00d_dsp_utils.jsfx-inc

@init

//==============================================================================
// FILTER APPLICATION
//==============================================================================

function apply_detection_filters(detect_l, detect_r) (
  // Apply highpass filter
  detect_l_filtered = hp_b0 * detect_l + hp_b1 * hp_x1_l + hp_b2 * hp_x2_l - hp_a1 * hp_y1_l - hp_a2 * hp_y2_l;
  hp_x2_l = hp_x1_l; hp_x1_l = detect_l; hp_y2_l = hp_y1_l; hp_y1_l = detect_l_filtered;

  detect_r_filtered = hp_b0 * detect_r + hp_b1 * hp_x1_r + hp_b2 * hp_x2_r - hp_a1 * hp_y1_r - hp_a2 * hp_y2_r;
  hp_x2_r = hp_x1_r; hp_x1_r = detect_r; hp_y2_r = hp_y1_r; hp_y1_r = detect_r_filtered;

  // Apply lowpass filter
  detect_l = lp_b0 * detect_l_filtered + lp_b1 * lp_x1_l + lp_b2 * lp_x2_l - lp_a1 * lp_y1_l - lp_a2 * lp_y2_l;
  lp_x2_l = lp_x1_l; lp_x1_l = detect_l_filtered; lp_y2_l = lp_y1_l; lp_y1_l = detect_l;

  detect_r = lp_b0 * detect_r_filtered + lp_b1 * lp_x1_r + lp_b2 * lp_x2_r - lp_a1 * lp_y1_r - lp_a2 * lp_y2_r;
  lp_x2_r = lp_x1_r; lp_x1_r = detect_r_filtered; lp_y2_r = lp_y1_r; lp_y1_r = detect_r;

  // Return filtered signals via global variables
  filtered_l = detect_l;
  filtered_r = detect_r;
);


//==============================================================================
// FILTER UTILITIES
//==============================================================================

function update_filter_coefficients() (
  // Update highpass filter coefficients
  calc_biquad_hp(max(hp_freq, 20));
  hp_b0 = b0; hp_b1 = b1; hp_b2 = b2; hp_a1 = a1; hp_a2 = a2;

  // Update lowpass filter coefficients
  calc_biquad_lp(min(lp_freq, 20000));
  lp_b0 = b0; lp_b1 = b1; lp_b2 = b2; lp_a1 = a1; lp_a2 = a2;
);
