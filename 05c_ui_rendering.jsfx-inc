// UI Rendering Module
// Control rendering and drawing functions
// Handles the visual representation of all UI controls
// Depends on: 00a_constants.jsfx-inc, 01g_file_reading.jsfx-inc, 02d_ui_utils.jsfx-inc

@init

//==============================================================================
// UI PANEL RENDERING
//==============================================================================

function draw_header() (
  // Draw drop shadow first (behind header)
  gfx_set(HEADER_SHADOW_R, HEADER_SHADOW_G, HEADER_SHADOW_B, 0.5);
  gfx_rect(0, HEADER_HEIGHT, gfx_w, HEADER_SHADOW_HEIGHT);
  
  // Draw header background
  gfx_set(HEADER_BG_R, HEADER_BG_G, HEADER_BG_B, 1);
  gfx_rect(0, 0, gfx_w, HEADER_HEIGHT);
  
  // Draw cream border line below header
  gfx_set(HEADER_BORDER_R, HEADER_BORDER_G, HEADER_BORDER_B, 1);
  gfx_rect(0, HEADER_HEIGHT, gfx_w, HEADER_BORDER_HEIGHT);
);


function draw_ui_panel_background() (
  gfx_set(UI_BG_R, UI_BG_G, UI_BG_B, 1);
  gfx_rect(UI_PANEL_X, UI_PANEL_Y, UI_PANEL_W, UI_PANEL_H);

  // Draw panel border
  gfx_set(0.5, 0.5, 0.5, 1);
  gfx_rect(UI_PANEL_X, UI_PANEL_Y, UI_PANEL_W, UI_PANEL_H, 0);
);

//==============================================================================
// SMALL KNOB DRAWING FUNCTIONS (moved here to be defined before use)
//==============================================================================

function draw_small_knob(x, y, value, min_val, max_val) (
  // Calculate center position
  center_x = x + SMALL_KNOB_RADIUS;
  center_y = y + SMALL_KNOB_RADIUS;
  
  // Draw drop shadow first (offset down and right)
  gfx_set(SMALL_KNOB_SHADOW_R, SMALL_KNOB_SHADOW_G, SMALL_KNOB_SHADOW_B, 0.3);
  gfx_circle(center_x + SMALL_KNOB_SHADOW_OFFSET, center_y + SMALL_KNOB_SHADOW_OFFSET, SMALL_KNOB_RADIUS, 1);
  
  // Draw knob background
  gfx_set(SMALL_KNOB_BG_R, SMALL_KNOB_BG_G, SMALL_KNOB_BG_B, 1);
  gfx_circle(center_x, center_y, SMALL_KNOB_RADIUS, 1);
  
  // Calculate angle for indicator (0-1 normalized value to -135° to +135° range)
  normalized_value = (value - min_val) / (max_val - min_val);
  angle_range = 270 * $pi / 180;  // 270 degrees in radians
  start_angle = -135 * $pi / 180;  // Start at -135 degrees
  current_angle = start_angle + normalized_value * angle_range;
  
  // Calculate indicator position (8 pixels from center)
  indicator_distance = 8;
  indicator_x = center_x + cos(current_angle) * indicator_distance;
  indicator_y = center_y + sin(current_angle) * indicator_distance;
  
  // Draw black indicator circle
  gfx_set(SMALL_KNOB_INDICATOR_R, SMALL_KNOB_INDICATOR_G, SMALL_KNOB_INDICATOR_B, 1);
  gfx_circle(indicator_x, indicator_y, SMALL_KNOB_INDICATOR_SIZE, 1);
);

//==============================================================================
// INTERACTIVE COLOR HELPERS
//==============================================================================

function set_interactive_color(is_hovered, is_active, normal_r, normal_g, normal_b, highlight_r, highlight_g, highlight_b, alpha) (
  is_hovered || is_active ? (
    gfx_set(highlight_r, highlight_g, highlight_b, alpha);
  ) : (
    gfx_set(normal_r, normal_g, normal_b, alpha);
  );
);

function set_point_color(is_hovered, is_curved) (
  is_hovered ? (
    // Hovered point - larger and brighter
    is_curved ? (
      gfx_set(1, 0.8, 0.2, 1); // Orange for curved points
    ) : (
      gfx_set(1, 1, 0.5, 1); // Yellowish highlight for normal points
    );
  ) : (
    // Normal point - smaller
    is_curved ? (
      gfx_set(1, 0.6, 0.1, 0.9); // Slightly transparent orange for curved points
    ) : (
      gfx_set(1, 1, 1, 0.8); // Slightly transparent white for normal points
    );
  );
);

function set_threshold_line_color(threshold_type, is_hovered, is_dragging) (
  threshold_type == THRESHOLD_INPUT_LEVEL ? (
    is_hovered || is_dragging ? (
      gfx_set(0.3, 1, 1, 1);
    ) : (
      gfx_set(0.2, 0.8, 1, 0.8);
    );
  ) : threshold_type == THRESHOLD_TRANSIENT ? (
    is_hovered || is_dragging ? (
      gfx_set(1, 0.3, 0.3, 1);
    ) : (
      gfx_set(1, 0.5, 0, 0.8);
    );
  ) : threshold_type == THRESHOLD_GR_BLEND ? (
    is_hovered || is_dragging ? (
      gfx_set(1, 1, 0.3, 1);
    ) : (
      gfx_set(0.9, 0.9, 0, 0.8);
    );
  );
);

//==============================================================================
// THRESHOLD LINE DRAWING HELPERS
//==============================================================================

function draw_threshold_line_with_label(line_y, start_x, end_x, threshold_type, threshold_value, label_text, label_x, label_y) (
  // Set color based on threshold type and state
  set_threshold_line_color(threshold_type, 
    hovered_threshold_line == threshold_type, 
    dragging_threshold_line == threshold_type);
  
  // Draw line
  gfx_line(start_x, line_y, end_x, line_y, 1);
  
  // Draw label
  gfx_x = label_x;
  gfx_y = label_y;
  gfx_drawstr(label_text);
);


//==============================================================================
// GENERIC CONTROL DRAWING FUNCTIONS
//==============================================================================

function draw_generic_slider(x, y, w, h, value, min_val, max_val, label) (
  // Draw label
  gfx_set(TEXT_R, TEXT_G, TEXT_B, 1);
  gfx_x = x; gfx_y = y - LABEL_HEIGHT;
  gfx_drawstr(label);

  // Draw slider background
  gfx_set(SLIDER_BG_R, SLIDER_BG_G, SLIDER_BG_B, 1);
  gfx_rect(x, y, w, h);

  // Draw slider fill
  fill_w = (value - min_val) / (max_val - min_val) * w;
  gfx_set(SLIDER_FILL_R, SLIDER_FILL_G, SLIDER_FILL_B, 1);
  gfx_rect(x, y, fill_w, h);

  // Draw handle
  handle_x = x + fill_w - 3;
  gfx_set(1, 1, 1, 1);
  gfx_rect(handle_x, y - 2, 6, h + 4);

  // Draw value text
  gfx_set(TEXT_R, TEXT_G, TEXT_B, 1);
  gfx_x = x + w + 10; gfx_y = y + 3;
  gfx_printf("%.2f", value);
);

function draw_generic_button(x, y, w, h, is_on, label) (
  // Draw button background
  is_on ? (
    gfx_set(BUTTON_ON_R, BUTTON_ON_G, BUTTON_ON_B, 1);
  ) : (
    gfx_set(BUTTON_OFF_R, BUTTON_OFF_G, BUTTON_OFF_B, 1);
  );
  gfx_rect(x, y, w, h);

  // Draw button border
  gfx_set(0.6, 0.6, 0.6, 1);
  gfx_rect(x, y, w, h, 0);

  // Draw button text
  gfx_set(TEXT_R, TEXT_G, TEXT_B, 1);
  gfx_x = x + 5; gfx_y = y + 5;
  gfx_drawstr(label);
);

function draw_generic_dropdown(x, y, w, h, current_value, label, param_index) (
  current_index = floor(current_value);
  
  // Draw label
  gfx_set(TEXT_R, TEXT_G, TEXT_B, 1);
  gfx_x = x; gfx_y = y - LABEL_HEIGHT;
  gfx_drawstr(label);

  // Draw dropdown background
  gfx_set(SLIDER_BG_R, SLIDER_BG_G, SLIDER_BG_B, 1);
  gfx_rect(x, y, w, h);

  // Draw dropdown border
  gfx_set(0.6, 0.6, 0.6, 1);
  gfx_rect(x, y, w, h, 0);

  // Draw current selection text
  gfx_set(TEXT_R, TEXT_G, TEXT_B, 1);
  gfx_x = x + 5; gfx_y = y + 5;

  // Display text using dynamic dropdown options
  get_dropdown_option_count(param_index) > 0 ? (
    // Use dynamically extracted dropdown options
    current_index < get_dropdown_option_count(param_index) ? (
      gfx_drawstr(get_dropdown_option(param_index, current_index));
    ) : (
      gfx_drawstr("Unknown");
    );
  ) : (
    // Fallback for non-dropdown parameters
    gfx_printf("%.0f", current_value);
  );

  // Draw dropdown arrow
  gfx_x = x + w - 15; gfx_y = y + 8;
  gfx_drawstr("v");
);

//==============================================================================
// GENERIC CONTROL RENDERING
//==============================================================================

function draw_control(index) (
  type = get_control_type(index);
  x = get_control_x(index);
  y = get_control_y(index);
  w = get_control_w(index);
  h = get_control_h(index);
  param_index = get_control_param(index);
  min_val = get_control_min(index);
  max_val = get_control_max(index);
  
  // Get current parameter value
  current_value = slider(param_index);
  
  type == 0 ? draw_generic_slider(x, y, w, h, current_value, min_val, max_val, get_slider_name(param_index)) :
  type == 1 ? draw_generic_button(x, y, w, h, current_value > 0.5, get_slider_name(param_index)) :
  type == 2 ? draw_generic_dropdown(x, y, w, h, current_value, get_slider_name(param_index), param_index) :
  0;
);

//==============================================================================
// SIGNAL FLOW VALIDATION DISPLAY
//==============================================================================

function draw_signal_flow_errors() (
  // Display filter validation error if detected
  filter_input_equals_output ? (
    // Draw error background (red with transparency)
    gfx_set(1, 0, 0, 0.8);
    gfx_rect(10, 10, 300, 40);
    
    // Draw error border
    gfx_set(1, 0, 0, 1);
    gfx_rect(10, 10, 300, 40, 0);
    
    // Draw error text
    gfx_set(1, 1, 1, 1);
    gfx_x = 15;
    gfx_y = 25;
    gfx_drawstr("ERROR: Filter stage not processing signal!");
  );
);

