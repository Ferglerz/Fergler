// UI Utilities Module
// Pure UI utility functions and coordinate conversions
// Contains control accessor functions and basic UI utilities
//
// Dependencies:
// - 00a_constants.jsfx-inc (for GRAPH_* and UI constants)
// - 01g_file_reading.jsfx-inc (for get_slider_name function)
// - 01a_memory.jsfx-inc (for control_defs array)

@init

//==============================================================================
// CONTROL ACCESSOR FUNCTIONS
//==============================================================================

function get_control_type(index) ( control_defs[index*10 + 0]; );
function get_control_x(index) ( control_defs[index*10 + 1]; );
function get_control_y(index) ( control_defs[index*10 + 2]; );
function get_control_w(index) ( control_defs[index*10 + 3]; );
function get_control_h(index) ( control_defs[index*10 + 4]; );
function get_control_param(index) ( control_defs[index*10 + 5]; );
function get_control_min(index) ( control_defs[index*10 + 6]; );
function get_control_max(index) ( control_defs[index*10 + 7]; );
function get_control_slider_type(index) ( control_defs[index*10 + 8]; );

// Knob accessor functions
function get_knob_x(index) ( knob_defs[index*8 + 0]; );
function get_knob_y(index) ( knob_defs[index*8 + 1]; );
function get_knob_param(index) ( knob_defs[index*8 + 2]; );
function get_knob_min(index) ( knob_defs[index*8 + 3]; );
function get_knob_max(index) ( knob_defs[index*8 + 4]; );
function get_knob_type(index) ( knob_defs[index*8 + 5]; );
function get_knob_active(index) ( knob_defs[index*8 + 6]; );
function get_knob_value(index) ( knob_defs[index*8 + 7]; );

// Large knob accessor functions
function get_large_knob_x(index) ( large_knob_defs[index*8 + 0]; );
function get_large_knob_y(index) ( large_knob_defs[index*8 + 1]; );
function get_large_knob_param(index) ( large_knob_defs[index*8 + 2]; );
function get_large_knob_min(index) ( large_knob_defs[index*8 + 3]; );
function get_large_knob_max(index) ( large_knob_defs[index*8 + 4]; );
function get_large_knob_type(index) ( large_knob_defs[index*8 + 5]; );
function get_large_knob_active(index) ( large_knob_defs[index*8 + 6]; );
function get_large_knob_value(index) ( large_knob_defs[index*8 + 7]; );

//==============================================================================
// BASIC UI UTILITIES
//==============================================================================

function is_point_in_control(x, y, control_index) (
  ctrl_x = get_control_x(control_index);
  ctrl_y = get_control_y(control_index);
  ctrl_w = get_control_w(control_index);
  ctrl_h = get_control_h(control_index);
  x >= ctrl_x && x <= ctrl_x + ctrl_w && y >= ctrl_y && y <= ctrl_y + ctrl_h;
);

function is_point_in_knob(x, y, knob_index) (
  knob_x = get_knob_x(knob_index);
  knob_y = get_knob_y(knob_index);
  x >= knob_x && x <= knob_x + KNOB_SIZE && y >= knob_y && y <= knob_y + KNOB_SIZE;
);

function is_point_in_large_knob(x, y, knob_index) (
  knob_x = get_large_knob_x(knob_index);
  knob_y = get_large_knob_y(knob_index);
  x >= knob_x && x <= knob_x + LARGE_KNOB_SIZE && y >= knob_y && y <= knob_y + LARGE_KNOB_SIZE;
);

function update_slider_value(control_index, mouse_x, mouse_y) (
  slider_type = get_control_slider_type(control_index);
  min_val = get_control_min(control_index);
  max_val = get_control_max(control_index);
  
  slider_type == 1 ? ( // Vertical slider
    ctrl_y = get_control_y(control_index);
    ctrl_h = get_control_h(control_index);
    normalized_pos = (mouse_y - ctrl_y) / ctrl_h;
    normalized_pos = max(0, min(1, normalized_pos));
    // Invert for vertical slider (0 at top, 1 at bottom)
    normalized_pos = 1 - normalized_pos;
  ) : ( // Horizontal slider (default)
    ctrl_x = get_control_x(control_index);
    ctrl_w = get_control_w(control_index);
    normalized_pos = (mouse_x - ctrl_x) / ctrl_w;
    normalized_pos = max(0, min(1, normalized_pos));
  );
  
  min_val + normalized_pos * (max_val - min_val);
);

function update_knob_value_from_mouse(knob_index, mouse_x, mouse_y) (
  knob_x = get_knob_x(knob_index);
  knob_y = get_knob_y(knob_index);
  min_val = get_knob_min(knob_index);
  max_val = get_knob_max(knob_index);
  knob_type = get_knob_type(knob_index);
  
  center_x = knob_x + KNOB_RADIUS;
  center_y = knob_y + KNOB_RADIUS;
  
  // Calculate mouse movement from center
  dx = mouse_x - center_x;
  dy = mouse_y - center_y;
  
  knob_type == KNOB_TYPE_ANGULAR ? (
    // Angular knob - calculate angle from center
    angle = atan2(dy, dx);
    angle < 0 ? angle = angle + 2 * $pi;
    
    // Convert angle to normalized value (0-1)
    adjusted_angle = angle - KNOB_ANGLE_START;
    adjusted_angle < 0 ? adjusted_angle = adjusted_angle + 2 * $pi;
    
    normalized_value = adjusted_angle / KNOB_ANGLE_RANGE;
    normalized_value = max(0, min(1, normalized_value));
  ) : (
    // Rotary knob - calculate distance from center
    distance = sqrt(dx * dx + dy * dy);
    max_distance = KNOB_RADIUS;
    normalized_value = min(1, distance / max_distance);
  );
  
  // Convert to parameter range
  new_value = min_val + normalized_value * (max_val - min_val);
  new_value = max(min_val, min(max_val, new_value));
  
  // Update knob value and slider
  knob_defs[knob_index*8 + 7] = new_value;
  param_index = get_knob_param(knob_index);
  slider(param_index) = new_value;
  sliderchange(1 << (param_index - 1));
  
  new_value;
);

function update_large_knob_value_from_mouse(knob_index, mouse_x, mouse_y) (
  knob_x = get_large_knob_x(knob_index);
  knob_y = get_large_knob_y(knob_index);
  min_val = get_large_knob_min(knob_index);
  max_val = get_large_knob_max(knob_index);
  knob_type = get_large_knob_type(knob_index);
  
  center_x = knob_x + LARGE_KNOB_RADIUS;
  center_y = knob_y + LARGE_KNOB_RADIUS;
  
  // Calculate mouse movement from center
  dx = mouse_x - center_x;
  dy = mouse_y - center_y;
  
  // Calculate angle from center
  angle = atan2(dy, dx);
  
  // Convert angle to normalized value based on knob type
  knob_type == LARGE_KNOB_TYPE_LTR ? (
    // Left-to-right: 0° to 270°
    start_angle = LARGE_KNOB_ANGLE_LTR_START;
    end_angle = LARGE_KNOB_ANGLE_LTR_END;
    range = end_angle - start_angle;
    
    // Normalize angle to 0-2π range
    angle < 0 ? angle = angle + 2 * $pi;
    
    // Adjust for start angle
    adjusted_angle = angle - start_angle;
    adjusted_angle < 0 ? adjusted_angle = adjusted_angle + 2 * $pi;
    
    normalized_value = adjusted_angle / range;
    normalized_value = max(0, min(1, normalized_value));
  ) : knob_type == LARGE_KNOB_TYPE_RTL ? (
    // Right-to-left: 90° to 360° (0°)
    start_angle = LARGE_KNOB_ANGLE_RTL_START;
    end_angle = LARGE_KNOB_ANGLE_RTL_END;
    range = end_angle - start_angle;
    
    // Normalize angle to 0-2π range
    angle < 0 ? angle = angle + 2 * $pi;
    
    // Adjust for start angle
    adjusted_angle = angle - start_angle;
    adjusted_angle < 0 ? adjusted_angle = adjusted_angle + 2 * $pi;
    
    normalized_value = adjusted_angle / range;
    normalized_value = max(0, min(1, normalized_value));
  ) : ( // LARGE_KNOB_TYPE_BIDIRECTIONAL
    // Bidirectional: -135° to 135°
    start_angle = LARGE_KNOB_ANGLE_BIDIR_START;
    end_angle = LARGE_KNOB_ANGLE_BIDIR_END;
    range = end_angle - start_angle;
    
    // Adjust for start angle
    adjusted_angle = angle - start_angle;
    
    normalized_value = adjusted_angle / range;
    normalized_value = max(0, min(1, normalized_value));
  );
  
  // Convert to parameter range
  new_value = min_val + normalized_value * (max_val - min_val);
  new_value = max(min_val, min(max_val, new_value));
  
  // Update knob value and slider
  large_knob_defs[knob_index*8 + 7] = new_value;
  param_index = get_large_knob_param(knob_index);
  slider(param_index) = new_value;
  sliderchange(1 << (param_index - 1));
  
  new_value;
);


//==============================================================================
// COORDINATE CLAMPING HELPERS
//==============================================================================

// Note: Graph coordinate conversion functions (db_to_graph_x, db_to_graph_y, etc.)
// are now defined in 03_Compression/02_graph_data_core.jsfx-inc where they belong


function clamp_x_to_graph(x) (
  max(GRAPH_X, min(GRAPH_X + GRAPH_SIZE, x))
);

function clamp_y_to_graph(y) (
  max(GRAPH_Y, min(GRAPH_Y + GRAPH_SIZE, y))
);

//==============================================================================
// DRAWING HELPERS
//==============================================================================

function draw_indicator_circle(x, y, radius, r, g, b, alpha, filled) (
  gfx_set(r, g, b, alpha);
  gfx_circle(x, y, radius, filled, 1); 
);


function draw_curve_segment(end_x, end_y, is_first_point) (
  is_first_point ? (
    gfx_x = end_x;
    gfx_y = end_y;
  ) : (
    gfx_lineto(end_x, end_y, 1); 
  );
);
