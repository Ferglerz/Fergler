// UI Rendering - Knobs Module
// All knob rendering (small and large knobs)
// Dependencies: 01_Utils/01_constants.jsfx-inc, 01_Utils/04_file_reading.jsfx-inc, 04_UI/01_ui_constants.jsfx-inc

@init

//==============================================================================
// SMALL KNOB DRAWING FUNCTIONS
//==============================================================================

function draw_knob_at_position(x, y, value, min_val, max_val, knob_type) (
  // Helper function to draw a knob at a specific position with given parameters
  center_x = x + KNOB_RADIUS;
  center_y = y + KNOB_RADIUS;
  
  // Draw drop shadow first (offset down and right)
  gfx_set(KNOB_SHADOW_R, KNOB_SHADOW_G, KNOB_SHADOW_B, 0.3);
  gfx_circle(center_x + KNOB_SHADOW_OFFSET, center_y + KNOB_SHADOW_OFFSET, KNOB_RADIUS, 1);
  
  // Draw knob background
  gfx_set(KNOB_BG_R, KNOB_BG_G, KNOB_BG_B, 1);
  gfx_circle(center_x, center_y, KNOB_RADIUS, 1);
  
  // Calculate normalized value
  normalized_value = (value - min_val) / (max_val - min_val);
  normalized_value = max(0, min(1, normalized_value));
  
  knob_type == KNOB_TYPE_ANGULAR ? (
    // Angular knob - draw indicator based on angle
    current_angle = KNOB_ANGLE_START + normalized_value * KNOB_ANGLE_RANGE;
    
    // Calculate indicator position (8 pixels from center)
    indicator_distance = 8;
    indicator_x = center_x + cos(current_angle) * indicator_distance;
    indicator_y = center_y + sin(current_angle) * indicator_distance;
    
    // Draw indicator circle
    gfx_set(KNOB_INDICATOR_R, KNOB_INDICATOR_G, KNOB_INDICATOR_B, 1);
    gfx_circle(indicator_x, indicator_y, KNOB_INDICATOR_SIZE, 1);
  ) : (
    // Rotary knob - draw arc based on value
    arc_angle = normalized_value * 2 * $pi;
    gfx_set(KNOB_INDICATOR_R, KNOB_INDICATOR_G, KNOB_INDICATOR_B, 1);
    gfx_arc(center_x, center_y, KNOB_RADIUS - 2, 0, arc_angle, 1);
  );
);

function draw_knob(knob_index) local(group_idx) (
  knob_x = get_knob_x(knob_index);
  knob_y = get_knob_y(knob_index);
  min_val = get_knob_min(knob_index);
  max_val = get_knob_max(knob_index);
  knob_type = get_knob_type(knob_index);
  param_index = get_knob_param(knob_index);
  group_idx = get_knob_group(knob_index);
  
  // Add group offset if knob is in a group
  group_idx >= 0 ? (
    knob_x += get_group_x(group_idx);
    knob_y += get_group_y(group_idx);
  );
  
  // Get current value from slider, not from stored knob value
  current_value = slider(param_index);
  
  // Use the helper function to eliminate code duplication
  draw_knob_at_position(knob_x, knob_y, current_value, min_val, max_val, knob_type);
);

function draw_generic_knob(x, y, value, min_val, max_val, label) (
  // Draw label
  gfx_set(TEXT_R, TEXT_G, TEXT_B, 1);
  gfx_x = x; gfx_y = y - LABEL_HEIGHT;
  gfx_drawstr(label);

  // Draw the knob using the helper function
  draw_knob_at_position(x, y, value, min_val, max_val, KNOB_TYPE_ANGULAR);

  // Draw value text
  gfx_set(TEXT_R, TEXT_G, TEXT_B, 1);
  gfx_x = x + KNOB_SIZE + 10; gfx_y = y + 3;
  gfx_printf("%.1f", value);
);

//==============================================================================
// LARGE KNOB DRAWING FUNCTIONS
//==============================================================================

function draw_large_knob_at_position(x, y, value, min_val, max_val, knob_type) (
  // Helper function to draw a large knob at a specific position with given parameters
  center_x = x + LARGE_KNOB_RADIUS;
  center_y = y + LARGE_KNOB_RADIUS;
  
  // Draw drop shadow first (offset down and right)
  gfx_set(LARGE_KNOB_SHADOW_R, LARGE_KNOB_SHADOW_G, LARGE_KNOB_SHADOW_B, 0.3);
  gfx_circle(center_x + 1, center_y + 1, LARGE_KNOB_RADIUS, 1);
  
  // Draw knob background (inner gray circle)
  gfx_set(LARGE_KNOB_BG_R, LARGE_KNOB_BG_G, LARGE_KNOB_BG_B, 1);
  gfx_circle(center_x, center_y, LARGE_KNOB_RADIUS, 1);
  
  // Calculate normalized value
  normalized_value = (value - min_val) / (max_val - min_val);
  normalized_value = max(0, min(1, normalized_value));
  
  // Calculate arc angles based on knob type
  knob_type == LARGE_KNOB_TYPE_LTR ? (
    start_angle = LARGE_KNOB_ANGLE_LTR_START;
    end_angle = LARGE_KNOB_ANGLE_LTR_START + normalized_value * (LARGE_KNOB_ANGLE_LTR_END - LARGE_KNOB_ANGLE_LTR_START);
    indicator_angle = end_angle;
  ) : knob_type == LARGE_KNOB_TYPE_RTL ? (
    start_angle = LARGE_KNOB_ANGLE_RTL_START;
    end_angle = LARGE_KNOB_ANGLE_RTL_START + normalized_value * (LARGE_KNOB_ANGLE_RTL_END - LARGE_KNOB_ANGLE_RTL_START);
    indicator_angle = end_angle;
  ) : ( // LARGE_KNOB_TYPE_BIDIRECTIONAL
    start_angle = LARGE_KNOB_ANGLE_BIDIR_START;
    end_angle = LARGE_KNOB_ANGLE_BIDIR_START + normalized_value * (LARGE_KNOB_ANGLE_BIDIR_END - LARGE_KNOB_ANGLE_BIDIR_START);
    indicator_angle = end_angle;
  );
  
  // Draw yellow arc from start to current value using gfx_arc()
  gfx_set(LARGE_KNOB_ARC_R, LARGE_KNOB_ARC_G, LARGE_KNOB_ARC_B, 1);
  inner_radius = LARGE_KNOB_RADIUS - LARGE_KNOB_ARC_DEPTH;
  outer_radius = LARGE_KNOB_RADIUS;
  // Draw arc as a thick ring by drawing multiple arcs at different radii
  i = 0;
  while (i <= LARGE_KNOB_ARC_DEPTH) (
    current_radius = inner_radius + i;
    gfx_arc(center_x, center_y, current_radius, start_angle, end_angle, 1);
    i += 1;
  );
  
  // Draw white indicator bar
  gfx_set(LARGE_KNOB_BAR_R, LARGE_KNOB_BAR_G, LARGE_KNOB_BAR_B, 1);
  
  // Calculate bar endpoints
  bar_inner_x = center_x + cos(indicator_angle) * inner_radius;
  bar_inner_y = center_y + sin(indicator_angle) * inner_radius;
  bar_outer_x = center_x + cos(indicator_angle) * (outer_radius + LARGE_KNOB_BAR_OVERHANG);
  bar_outer_y = center_y + sin(indicator_angle) * (outer_radius + LARGE_KNOB_BAR_OVERHANG);
  
  // Draw bar as a thick line (3 pixels wide for smaller knob)
  bar_width = 3;
  angle_perp = indicator_angle + $pi/2; // Perpendicular angle
  
  // Calculate perpendicular offset for bar width
  offset_x = cos(angle_perp) * bar_width/2;
  offset_y = sin(angle_perp) * bar_width/2;
  
  // Draw bar as a rectangle (simplified approach)
  bar_mid_x = (bar_inner_x + bar_outer_x) / 2;
  bar_mid_y = (bar_inner_y + bar_outer_y) / 2;
  bar_length = sqrt((bar_outer_x - bar_inner_x)^2 + (bar_outer_y - bar_inner_y)^2);
  
  // Draw thick line by drawing multiple parallel lines
  i = -bar_width/2;
  while (i <= bar_width/2) (
    line_x1 = bar_inner_x + offset_x * i / (bar_width/2);
    line_y1 = bar_inner_y + offset_y * i / (bar_width/2);
    line_x2 = bar_outer_x + offset_x * i / (bar_width/2);
    line_y2 = bar_outer_y + offset_y * i / (bar_width/2);
    
    gfx_line(line_x1, line_y1, line_x2, line_y2, 1);
    i += 1;
  );
);

function draw_large_knob(knob_index) local(group_idx) (
  knob_x = get_knob_x(knob_index);
  knob_y = get_knob_y(knob_index);
  min_val = get_knob_min(knob_index);
  max_val = get_knob_max(knob_index);
  knob_type = get_knob_type(knob_index);
  param_index = get_knob_param(knob_index);
  group_idx = get_knob_group(knob_index);
  
  // Add group offset if knob is in a group
  group_idx >= 0 ? (
    knob_x += get_group_x(group_idx);
    knob_y += get_group_y(group_idx);
  );
  
  // Get current value from slider, not from stored knob value
  current_value = slider(param_index);
  
  // Draw label above knob
  gfx_set(TEXT_R, TEXT_G, TEXT_B, 1);
  gfx_x = knob_x;
  gfx_y = knob_y - LABEL_HEIGHT;
  gfx_drawstr(get_slider_name(param_index));
  
  // Draw the knob
  draw_large_knob_at_position(knob_x, knob_y, current_value, min_val, max_val, knob_type);
  
  // Draw value text below knob
  gfx_set(TEXT_R, TEXT_G, TEXT_B, 1);
  gfx_x = knob_x + LARGE_KNOB_SIZE / 2 - 15;
  gfx_y = knob_y + LARGE_KNOB_SIZE + 5;
  gfx_printf("%.1f", current_value);
);

