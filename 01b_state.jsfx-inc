// State Management Module
// State variable initialization and management
// Depends on: 00a_constants.jsfx-inc, 00b_math_utils.jsfx-inc

@init


//==============================================================================
// STATE VARIABLES INITIALIZATION
//==============================================================================

function init_state_variables() (
  // Audio processing state
  rms_sum = 0;
  rms_pos = 0;
  lookahead_pos = 0;
  
  // Clear RMS buffer
  i = 0;
  while (i < max_rms_samples) (
    rms_buffer[i] = 0;
    i += 1;
  );

  // Filter states
  hp_x1_l=hp_x2_l=hp_y1_l=hp_y2_l=0;
  hp_x1_r=hp_x2_r=hp_y1_r=hp_y2_r=0;
  lp_x1_l=lp_x2_l=lp_y1_l=lp_y2_l=0;
  lp_x1_r=lp_x2_r=lp_y1_r=lp_y2_r=0;

  // Filter coefficients
  hp_b0=hp_b1=hp_b2=hp_a1=hp_a2=0;
  lp_b0=lp_b1=lp_b2=lp_a1=lp_a2=0;

  // Compressor character state
  compression_history = 0;
  tube_saturation = 0;
  fet_transient_detector = 0;
  program_release_timer = 0;
  varimu_release_factor = 1;

  // New character model states
  bridged_diode_env = 0;
  vca_env = 0;
  pwm_env = 0;
  fet_env = 0;
  optical_env = 0;
  prev_detector_db = 0;

  // RMS normalization state
  rms_max = 0.0001;

  // Program release state
  base_fast_s = 0.05;  // 50ms
  base_med_s = 0.3;    // 300ms
  base_slow_s = 1.0;   // 1000ms
  global_smoothed_gain_db = 0;

  // Limiter state variables
  limiter_prev_l = 0;
  limiter_prev_r = 0;

  // Display state
  current_input_db = GRAPH_MIN_DB;
  current_gr_db = 0;
  
  // Real-time signal display variables (updated 4x per second)
  display_input_sample = 0;
  display_rms_level = 0;
  display_post_graph = 0;
  display_post_makeup = 0;
  display_update_counter = 0;
  
  // Multi-stage release state (3 cascaded envelope followers)
  release_stage_1_env = 0;
  release_stage_2_env = 0;
  release_stage_3_env = 0;
  
  // Transient detection state
  transient_detector_prev_db = GRAPH_MIN_DB;
  transient_detected = 0;
  transient_gr_reduction = 0;
  
  // Threshold line interaction state (persistent across @init)
  !threshold_lines_initialized ? (
    threshold_lines_initialized = 1;
    // Default positions already set by sliders
  );
  
  // Initialize RMS samples calculation (must be done after srate is available)
  rms_samples = clamp(floor(rms_size_ms * 0.001 * srate), 1, max_rms_samples);
  lookahead_samples = clamp(floor(lookahead_ms * 0.001 * srate), 0, max_lookahead_samples);
);
