// UI Controls Module
// Control definition system and layout management
// Handles control creation, positioning, and property management

@init

//==============================================================================
// CONTROL DEFINITION SYSTEM
//==============================================================================

function define_control(index, type, x, y, w, h, param_index, min_val, max_val, label) (
  control_defs[index*10 + 0] = type;      // 0=slider, 1=button, 2=dropdown
  control_defs[index*10 + 1] = x;         // X position
  control_defs[index*10 + 2] = y;         // Y position
  control_defs[index*10 + 3] = w;         // Width
  control_defs[index*10 + 4] = h;         // Height
  control_defs[index*10 + 5] = param_index; // Parameter index (0-29 for sliders)
  control_defs[index*10 + 6] = min_val;   // Min value
  control_defs[index*10 + 7] = max_val;   // Max value
  control_defs[index*10 + 8] = 0;         // Reserved for options count
  control_defs[index*10 + 9] = 0;         // Reserved for options pointer
);

function get_control_type(index) ( control_defs[index*10 + 0]; );
function get_control_x(index) ( control_defs[index*10 + 1]; );
function get_control_y(index) ( control_defs[index*10 + 2]; );
function get_control_w(index) ( control_defs[index*10 + 3]; );
function get_control_h(index) ( control_defs[index*10 + 4]; );
function get_control_param(index) ( control_defs[index*10 + 5]; );
function get_control_min(index) ( control_defs[index*10 + 6]; );
function get_control_max(index) ( control_defs[index*10 + 7]; );

//==============================================================================
// CONTROL LAYOUT AND INITIALIZATION
//==============================================================================

function setup_control_layout() local(control_x, control_y, row) (
  // Initialize control positioning - moved down by 16 pixels
  control_x = UI_PANEL_X + 20;
  control_y = UI_PANEL_Y + 20;  // Start higher since we have more space now
  row = 0;

  // Column 1: Time-related parameters (0-5) + some globals (20-22)
  define_control(0, 0, control_x, control_y + row * CONTROL_SPACING_Y, SLIDER_W, SLIDER_H, 0, 0.1, 100, "Attack (ms)");
  row += 1;
  define_control(1, 0, control_x, control_y + row * CONTROL_SPACING_Y, SLIDER_W, SLIDER_H, 1, -2, 2, "Attack Curve");
  row += 1;
  define_control(2, 0, control_x, control_y + row * CONTROL_SPACING_Y, SLIDER_W, SLIDER_H, 2, 10, 1000, "Release (ms)");
  row += 1;
  define_control(3, 0, control_x, control_y + row * CONTROL_SPACING_Y, SLIDER_W, SLIDER_H, 3, -2, 2, "Release Curve");
  row += 1;
  define_control(4, 0, control_x, control_y + row * CONTROL_SPACING_Y, SLIDER_W, SLIDER_H, 4, 0, 10, "Lookahead (ms)");
  row += 1;
  define_control(5, 0, control_x, control_y + row * CONTROL_SPACING_Y, SLIDER_W, SLIDER_H, 5, 0, 50, "Hold (ms)");
  row += 1;
  define_control(20, 0, control_x, control_y + row * CONTROL_SPACING_Y, SLIDER_W, SLIDER_H, 20, 0.5, 10, "Strength");
  row += 1;
  define_control(21, 0, control_x, control_y + row * CONTROL_SPACING_Y, SLIDER_W, SLIDER_H, 21, -30, 30, "Threshold (dB)");
  row += 1;
  define_control(22, 0, control_x, control_y + row * CONTROL_SPACING_Y, SLIDER_W, SLIDER_H, 22, -2, 2, "Strength Curve");
  row += 1;

  // Column 2: RMS & Detection (6-9) + Filtering (10-11) + some globals (23-25)
  control_x += CONTROL_SPACING_X;
  row = 0;
  define_control(6, 0, control_x, control_y + row * CONTROL_SPACING_Y, SLIDER_W, SLIDER_H, 6, 1, 100, "RMS Window (ms)");
  row += 1;
  define_control(7, 1, control_x, control_y + row * CONTROL_SPACING_Y, BUTTON_W, BUTTON_H, 7, 0, 1, "RMS Norm");
  row += 1;
  define_control(8, 1, control_x, control_y + row * CONTROL_SPACING_Y, BUTTON_W, BUTTON_H, 8, 0, 1, "Detection Mode");
  row += 1;
  define_control(9, 0, control_x, control_y + row * CONTROL_SPACING_Y, SLIDER_W, SLIDER_H, 9, -30, 0, "Max GR (dB)");
  row += 1;
  define_control(10, 0, control_x, control_y + row * CONTROL_SPACING_Y, SLIDER_W, SLIDER_H, 10, 20, 200, "HP Filter (Hz)");
  row += 1;
  define_control(11, 0, control_x, control_y + row * CONTROL_SPACING_Y, SLIDER_W, SLIDER_H, 11, 1000, 20000, "LP Filter (Hz)");
  row += 1;
  define_control(23, 0, control_x, control_y + row * CONTROL_SPACING_Y, SLIDER_W, SLIDER_H, 23, -20, 20, "Makeup Gain (dB)");
  row += 1;
  define_control(24, 0, control_x, control_y + row * CONTROL_SPACING_Y, SLIDER_W, SLIDER_H, 24, 0, 100, "Mix %");
  row += 1;
  define_control(25, 2, control_x, control_y + row * CONTROL_SPACING_Y, DROPDOWN_W, DROPDOWN_H, 25, 0, 6, "Compressor Type");
  row += 1;

  // Column 3: Character & Harmonics (12-19) + some globals (26-27)
  control_x += CONTROL_SPACING_X;
  row = 0;
  define_control(12, 0, control_x, control_y + row * CONTROL_SPACING_Y, SLIDER_W, SLIDER_H, 12, 0, 200, "Character %");
  row += 1;
  define_control(13, 2, control_x, control_y + row * CONTROL_SPACING_Y, DROPDOWN_W, DROPDOWN_H, 13, 0, 4, "Harmonic Type");
  row += 1;
  define_control(14, 0, control_x, control_y + row * CONTROL_SPACING_Y, SLIDER_W, SLIDER_H, 14, 0, 1, "Harmonic Amount");
  row += 1;
  define_control(15, 0, control_x, control_y + row * CONTROL_SPACING_Y, SLIDER_W, SLIDER_H, 15, 0.5, 10, "Harmonic Drive");
  row += 1;
  define_control(16, 0, control_x, control_y + row * CONTROL_SPACING_Y, SLIDER_W, SLIDER_H, 16, 0, 1, "Harmonic Mix");
  row += 1;
  define_control(17, 0, control_x, control_y + row * CONTROL_SPACING_Y, SLIDER_W, SLIDER_H, 17, 0, 2, "Even Boost");
  row += 1;
  define_control(18, 0, control_x, control_y + row * CONTROL_SPACING_Y, SLIDER_W, SLIDER_H, 18, 0, 2, "Odd Boost");
  row += 1;
  define_control(19, 1, control_x, control_y + row * CONTROL_SPACING_Y, BUTTON_W, BUTTON_H, 19, 0, 1, "Prog Release");
  row += 1;
  define_control(26, 1, control_x, control_y + row * CONTROL_SPACING_Y, BUTTON_W, BUTTON_H, 26, 0, 1, "Sidechain");
  row += 1;
  define_control(27, 1, control_x, control_y + row * CONTROL_SPACING_Y, BUTTON_W, BUTTON_H, 27, 0, 1, "Listen SC");
  row += 1;

  // Column 4: Remaining globals (28-29)
  control_x += CONTROL_SPACING_X;
  row = 0;
  define_control(28, 2, control_x, control_y + row * CONTROL_SPACING_Y, DROPDOWN_W, DROPDOWN_H, 28, 0, 2, "Prog Release Type");
  row += 1;
  define_control(29, 1, control_x, control_y + row * CONTROL_SPACING_Y, BUTTON_W, BUTTON_H, 29, 0, 1, "Limiter");
  row += 1;
);

// Note: setup_control_layout() is called in main file after init_ui_constants()
